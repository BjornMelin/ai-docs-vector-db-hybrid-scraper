[project]
name = "ai-docs-vector-db-hybrid-scraper"
version = "0.1.0"
description = "ðŸš€ Hybrid AI documentation scraping system combining Crawl4AI (bulk) + Firecrawl MCP (on-demand) with Qdrant vector database for Claude Desktop/Code integration"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.13"
authors = [
    { name = "BjornMelin", email = "your-email@example.com" }
]
keywords = [
    "ai", "vector-database", "documentation", "scraping", "crawl4ai", 
    "firecrawl", "qdrant", "claude", "mcp", "embeddings", "search"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]

dependencies = [
    "crawl4ai[all]>=0.6.3",
    "qdrant-client[fastembed]>=1.14.2",
    "openai>=1.82.0",
    "aiohttp>=3.11.18",
    "pandas>=2.2.3",
    "numpy>=2.2.6",
    "python-dotenv>=1.1.0",
    "colorlog>=6.9.0",
    "tqdm>=4.67.1",
    "playwright>=1.52.0",
    "httpx>=0.28.1",
    "pydantic>=2.11.5",
    "click>=8.2.1",
    "rich>=14.0.0",
    "asyncio-throttle>=1.0.2",
    "fastembed==0.6.1",
    "FlagEmbedding>=1.3.4",
    "firecrawl-py>=2.7.0",
    "tree-sitter>=0.24.0",
    "tree-sitter-python>=0.23.6",
    "tree-sitter-javascript>=0.23.1",
    "tree-sitter-typescript>=0.23.2",
    "redis[hiredis]>=5.3.0",
    "fastmcp>=2.5.0",
    "uvicorn>=0.34.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "black>=25.1.0",
    "ruff>=0.11.11",
]

[project.urls]
Homepage = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Repository = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Issues = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper/issues"

[project.scripts]
scrape-docs = "src.crawl4ai_bulk_embedder:main"
manage-db = "src.manage_vector_db:main"
mcp-server = "src.mcp_server:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
managed = true
package = false

# ===== Simplified Ruff Configuration =====
[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src", "tests", "examples"]

[tool.ruff.lint]
# Basic but comprehensive rule selection
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
    "PL",     # pylint (basic subset)
]

ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105",  # Missing docstrings
    "PLR0913",  # Too many arguments
    "PLR2004",  # Magic value used in comparison
    "E501",     # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "ANN", "S101", "PLR"]
"examples/**/*" = ["D", "ANN", "T201", "F841"]

[tool.ruff.lint.isort]
force-single-line = true

# ===== Black Configuration =====
[tool.black]
line-length = 88
target-version = ['py313']

# ===== Pytest Configuration =====
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]
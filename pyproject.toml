[project]
name = "ai-docs-vector-db-hybrid-scraper"
version = "0.1.0"
description = "ðŸš€ Hybrid AI documentation scraping system combining Crawl4AI (bulk) + Firecrawl MCP (on-demand) with Qdrant vector database for Claude Desktop/Code integration"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.13"
authors = [{ name = "BjornMelin", email = "your-email@example.com" }]
keywords = [
    "ai",
    "vector-database",
    "documentation",
    "scraping",
    "crawl4ai",
    "firecrawl",
    "qdrant",
    "claude",
    "mcp",
    "embeddings",
    "search",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]

dependencies = [
    # Core web scraping
    "crawl4ai[all]>=0.6.3",
    "firecrawl-py>=2.7.1",
    # Vector database & embeddings
    "qdrant-client[fastembed]>=1.14.2",
    "openai>=1.82.1",
    "fastembed>=0.6.1,<0.7.0", # Pin to 0.6.x to avoid breaking changes
    "FlagEmbedding>=1.3.5",
    # Data processing & ML
    "pandas>=2.2.3",
    "numpy>=2.2.6",
    "scipy>=1.15.3",
    "tree-sitter>=0.24.0",
    "tree-sitter-python>=0.23.6",
    "tree-sitter-javascript>=0.23.1",
    "tree-sitter-typescript>=0.23.2",
    # HTTP & async
    "aiohttp>=3.12.4",
    "httpx>=0.28.1",
    "asyncio-throttle>=1.0.2",
    "mcp>=1.9.2,<2.0.0",
    "uvicorn>=0.34.2",
    # Browser automation
    "playwright>=1.52.0",
    "browser-use>=0.2.5",
    "langchain-openai>=0.3.11,<0.4.0", # Allow minor updates
    "langchain-anthropic>=0.2.16",
    "langchain-google-genai>=1.0.1",
    # Caching
    "redis[hiredis]>=6.2.0",
    # Task queue
    "arq>=0.25.0",
    # Configuration & validation
    "pydantic>=2.10.4,<2.11.0", # Constrained by browser-use dependency
    "pydantic-settings>=2.8.0",
    "python-dotenv>=1.1.0",
    # CLI & UI
    "click>=8.2.1",
    "rich>=14.0.0",
    "colorlog>=6.9.0",
    "tqdm>=4.67.1",
    # Additional dependencies
    "pyyaml>=6.0.2",
    "aiofiles>=24.1.0",
    "python-multipart>=0.0.12", # For FastAPI file uploads
    "sentence-transformers>=3.3.1", # For reranking models
    "tomli-w>=1.0.0", # For TOML writing
    "onnx>=1.18.0", # For FastEmbed
    "onnxruntime>=1.20.1", # For FastEmbed
    "jsonschema2md>=1.5.2",
    "fastmcp>=2.5.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
    "fakeredis>=2.29.0",
    "black>=25.1.0",
    "ruff>=0.11.12",
]

[project.urls]
Homepage = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Repository = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Issues = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper/issues"

[project.scripts]
scrape-docs = "src.crawl4ai_bulk_embedder:main"
manage-db = "src.manage_vector_db:main"
mcp-server = "src.mcp_server:main"
task-worker = "src.cli_worker:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
managed = true
package = false

# ===== Simplified Ruff Configuration =====
[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src", "tests", "examples"]

[tool.ruff.lint]
# Basic but comprehensive rule selection
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
    "PL",  # pylint (basic subset)
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",    # Missing docstrings
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
    "E501",    # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "ANN", "S101", "PLR"]
"examples/**/*" = ["D", "ANN", "T201", "F841"]

[tool.ruff.lint.isort]
force-single-line = true

# ===== Black Configuration =====
[tool.black]
line-length = 88
target-version = ['py313']

# ===== Pytest Configuration =====
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]

# Clean output formatting
addopts = [
    "--tb=short",         # Shorter traceback format
    "--strict-markers",   # Treat unknown markers as errors
    "--disable-warnings", # Disable pytest warnings for cleaner output
    "--no-header",        # Remove pytest header
    "-ra",                # Show short test summary for all except passed
    "--maxfail=5",        # Stop after 5 failures
]

# Test discovery
minversion = "8.0"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "performance: marks tests as performance tests",
    "asyncio: marks tests as async tests",
]

# Logging configuration for tests
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
]

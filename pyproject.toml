[project]
name = "ai-docs-vector-db-hybrid-scraper"
version = "0.1.0"
description = "Hybrid AI documentation scraping system combining Crawl4AI (bulk) + Firecrawl MCP (on-demand) with Qdrant vector database for Claude Desktop/Code integration"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11,<3.13"
authors = [{ name = "Bjorn Melin" }]
keywords = [
    "ai",
    "vector-database",
    "documentation",
    "scraping",
    "crawl4ai",
    "firecrawl",
    "qdrant",
    "claude",
    "mcp",
    "embeddings",
    "search",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    # Python 3.13 temporarily unsupported due to upstream GPU stack
    # compatibility (vLLM/Torch/TorchVision). Keep classifiers aligned
    # with requires-python to avoid resolver splits.
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]

dependencies = [
    "fastapi[standard]>=0.118.1,<0.119.0",
    "starlette>=0.48.0,<0.49.0",
    "uvicorn[standard]>=0.37.0,<0.38.0",
    "python-multipart>=0.0.20,<0.1.0",
    "pydantic>=2.12.0,<3.0.0",
    "pydantic-settings>=2.11.0,<3.0.0",
    "python-dotenv>=1.1.1,<2.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    "crawl4ai[all]>=0.7.4,<0.8.0",
    "firecrawl-py>=4.3.6,<5.0.0",
    "qdrant-client[fastembed]>=1.15.1,<2.0",
    "openai>=1.108.1,<3.0.0",
    "fastembed>=0.7.3,<0.7.4",
    "FlagEmbedding>=1.3.5,<2.0.0",
    "numpy>=1.24,<2.4",
    "scipy>=1.16.2,<2.0.0",
    "defusedxml>=0.7.1,<0.8.0",
    "beautifulsoup4>=4.13.5,<5.0.0",
    "lxml>=5.3.0,<6.1.0",
    "aiohttp>=3.12.15,<4.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    "tenacity>=9.1.2,<10.0.0",
    "mcp>=1.14.1,<2.0.0",
    "fastmcp>=2.12.3,<3.0.0",
    "redis[hiredis]>=5.3.1,<7.0.0",
    "cachetools>=5.5.2,<6.0.0",
    "slowapi>=0.1.9,<0.2.0",
    "platformdirs>=4.3.8,<5.0.0",
    "click>=8.2.1,<8.2.2",
    "rich>=14.1.0,<15.0.0",
    "colorlog>=6.9.0,<7.0.0",
    "tqdm>=4.67.1,<5.0.0",
    "questionary>=2.1.1,<3.0.0",
    "prometheus-client>=0.23.1,<0.24.0",
    "prometheus-fastapi-instrumentator>=7.1.0,<8.0.0",
    "sqlalchemy>=2.0.43,<3.0.0",
    "sqlmodel>=0.0.25,<0.0.26",
    "tomli-w>=1.2.0,<2.0.0",
    "jsonschema2md>=1.7.0,<2.0.0",
    "watchdog>=6.0.0,<7.0.0",
    "tool>=0.8.0",
    "httpx>=0.28.1,<0.29.0",
    "browser-use>=0.8.0,<0.9.0",
    "playwright>=1.55.0,<2.0.0",
    "playwright-stealth>=2.0.0,<3.0.0",
    "langchain-openai>=0.3.35,<1.0.0",
    "langchain-anthropic>=0.1.22,<1.0.0",
    "langchain-google-genai>=2.1.12,<3.0.0",
    # dependency-injector wires core clients (OpenAI, Qdrant, Dragonfly, Firecrawl) via ApplicationContainer.
    "dependency-injector>=4.48.2",
    "pydeps>=3.0.1",
    "scikit-learn>=1.7.2,<2.0.0",
    "langchain>=0.3.27,<0.4.0",
    "langchain-core>=0.3.78",
    "langchain-community>=0.3.31,<0.4.0",
    "langchain-qdrant>=0.2.1,<0.4.0",
    "langchain-text-splitters>=0.3.11,<0.4.0",
    "langchain-mcp-adapters>=0.1.10,<0.2.0",
    "langgraph>=0.6.8,<0.6.9",
    "asgi-correlation-id>=4.3.4,<5.0.0",
    "purgatory>=3.0.1,<4.0.0",
    "aiolimiter>=1.2.1",
    "trafilatura>=2.0.0",
    "selectolax>=0.4.0",
    "tiktoken>=0.12.0,<0.13.0",
]


[project.optional-dependencies]
eval = [
    "ragas==0.1.13",
    "langchain-openai>=0.3.35,<1.0.0",
    "datasets>=2.18.0,<5.0.0",
]

# Development dependencies
dev = [
    "pytest>=8.4.2,<9.0.0",
    "pytest-asyncio>=1.2.0,<2.0.0",
    "asgi-lifespan>=2.1.0,<3.0.0",
    "pytest-cov>=7.0.0,<8.0.0",
    "pytest-mock>=3.15.1,<4.0.0",
    "pytest-timeout>=2.4.0,<3.0.0",
    "pytest-xdist>=3.8.0,<4.0.0",
    "pytest-benchmark>=5.1.0,<6.0.0",
    "hypothesis>=6.140.0,<7.0.0",
    "mutmut>=3.3.1,<4.0.0",
    "fakeredis>=2.31.3,<3.0.0",
    "coverage>=7.6.0,<8.0.0",
    "ruff>=0.13.1,<0.15.0",
    "pylint>=3.3.8,<4.1.0",
    "pyright>=1.1.379,<2.0.0",
    "locust>=2.37.10,<3.0.0",
    "respx>=0.22.0",
]

# Documentation
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.20",
    "mkdocstrings>=0.30.1",
    "mkdocstrings-python>=1.18.2"
]

# Contract testing tools
contract = [
    "faker>=37.8.0,<38.0.0",
]

# Accessibility testing tools
accessibility = [
    "axe-core-python>=0.1.0,<1.0.0",
    "selenium>=4.35.0,<5.0.0",
    "playwright>=1.55.0,<2.0.0",
    "beautifulsoup4>=4.13.5,<5.0.0",
    "lxml>=5.3.0,<6.1.0",
]

# LLM integrations (core AI functionality)
llm = [
    "langchain-anthropic>=0.3.20,<1.0.0",
    "langchain-google-genai>=2.1.12,<3.0.0",
    "sentence-transformers>=3,<4",
]

# Observability and monitoring
observability = [
    "opentelemetry-api>=1.37.0,<2.0.0",
    "opentelemetry-sdk>=1.37.0,<2.0.0",
    "opentelemetry-instrumentation-fastapi>=0.58b0,<0.59.0",
    "opentelemetry-exporter-prometheus>=0.58b0,<0.59.0",
    "opentelemetry-instrumentation-starlette>=0.58b0,<0.59.0",
    "psutil>=6.1.1",
]

# Code parsing tools
parsing = [
    "tree-sitter>=0.25.1,<0.26.0",
    "tree-sitter-python>=0.25.0,<0.26.0",
    "tree-sitter-javascript>=0.25.0,<0.26.0",
    "tree-sitter-typescript>=0.23.2,<0.24.0",
]

# High-performance data processing
dataframe = ["polars>=1.33.1,<2.0.0", "pyarrow>=21.0.0,<22.0.0"]

# GPU acceleration (optional AI/ML performance boost)
gpu = [
    # Core PyTorch stack (aligned with official compatibility matrix)
    "torch>=2.8.0,<2.9.0",
    "torchvision>=0.23.0,<0.24.0",
    "torchaudio>=2.8.0,<2.9.0",
    # Inference libraries
    "transformers>=4.44.0,<5.0.0",
    "accelerate>=0.34.0,<2.0.0",
    "vllm>=0.10.0,<0.11.0",
    # Optional optimization libs (may compile from source depending on platform)
    "bitsandbytes>=0.44.0,<1.0.0",
    "xformers>=0.0.28,<1.0.0",
    "triton>=3.0.0,<4.0.0",
    "flash-attn>=2.6.0,<3.0.0",
    "deepspeed>=0.14.0,<1.0.0",
]

server = [
    "brotli-asgi>=1.4.0,<2.0.0",
    "flagsmith>=4.0.1",
    "purgatory[redis]>=3.0.1,<4.0.0",
    "uvloop>=0.21.0,<1.0.0; platform_system != 'Windows'",
]

web = [
    "tavily-python>=0.7.12",
]

# All optional dependencies
all = [
    "ai-docs-vector-db-hybrid-scraper[dev,contract,accessibility,llm,observability,parsing,dataframe,docs,gpu,eval,server,web]",
]

[project.urls]
Homepage = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Repository = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Issues = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper/issues"

[project.scripts]
ai-docs = "src.cli.main:main"
manage-db = "src.manage_vector_db:main"
mcp-server = "src.unified_mcp_server:main"

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# ===== Tool Configurations =====

[tool.ruff]
line-length = 88
target-version = "py312"
include = ["*.py", "*.pyi"]
extend-exclude = [".github", "**/*.md", "**/*.yml", "**/*.yaml"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
    "T10", # flake8-debugger
    "S",   # flake8-bandit (security)
]

ignore = [
    "S101",   # assert statements in tests
    "S108",   # insecure temp file usage (acceptable in tests)
    "S311",   # pseudo-random generators (acceptable for tests/non-crypto)
    "T20",    # print statements in CLI
    "COM812", # trailing comma missing (formatter handles)
    "COM819", # trailing comma prohibited
]

[tool.ruff.lint.per-file-ignores]
# Test files - more permissive
"tests/**/*" = [
    "S101",   # Allow assert statements
    "ARG001", # Allow unused arguments
    "F821",   # Allow undefined names in test mocking contexts
]
# CLI and utility scripts
"src/cli/**/*" = [
    "T20", # Allow print statements
]
# MCP tools - protocol-specific patterns
"src/mcp_tools/**/*" = [
    "ARG001", # Allow unused arguments for MCP protocol
]
# GPU utilities - optional dependencies that may not be installed
"src/utils/gpu.py" = [
    "F401", # Allow unused imports for optional GPU libraries
]
# Chaos orchestrator - development modules that don't exist yet
"src/automation/self_healing/intelligent_chaos_orchestrator.py" = [
    "F401", # Allow imports of non-existent chaos testing modules
]

[tool.ruff.lint.isort]
combine-as-imports = true
order-by-type = true
known-first-party = ["src", "tests"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
lines-after-imports = 2

[tool.pyright]
pythonVersion = "3.12"
typeCheckingMode = "standard"
include = ["src", "tests", "scripts", "examples"]
exclude = [
    "build",
    "dist",
    "docs",
    "site",
    ".pytest_cache",
    ".ruff_cache",
    ".mypy_cache",
    ".venv",
]
reportMissingImports = "warning"
reportMissingTypeStubs = false

[[tool.pyright.executionEnvironments]]
root = "src/models"
typeCheckingMode = "strict"

[[tool.pyright.executionEnvironments]]
root = "src/config"
typeCheckingMode = "strict"

[[tool.pyright.executionEnvironments]]
root = "src/services"
typeCheckingMode = "standard"

[[tool.pyright.executionEnvironments]]
root = "tests"
typeCheckingMode = "basic"

[[tool.pyright.executionEnvironments]]
root = "examples"
typeCheckingMode = "basic"

[tool.pytest.ini_options]
# Modern asyncio configuration - essential for async testing
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Test discovery and execution
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*", "*Tests", "*Test"]
minversion = "8.4"

# Performance and reliability optimizations
considerfailures = true # Re-run failed tests first
tb_native = true        # Use Python's native traceback

# Essential pytest flags for development workflow
addopts = [
    "--strict-markers",              # Treat unknown markers as errors
    "--strict-config",               # Error on unknown config keys
    "--tb=short",                    # Shorter traceback format
    "--durations=10",                # Show 10 slowest tests
    "--maxfail=5",                   # Stop after 5 failures
    "--import-mode=prepend",         # Prepend mode for src imports
    "--showlocals",                  # Show local variables in tracebacks
    "--doctest-modules",             # Run doctests in modules
    "--doctest-continue-on-failure", # Continue after doctest failures
    "--disable-warnings",            # Clean output
    "--randomly-seed=42",            # Deterministic pytest-randomly seed
    "-q",                            # Quiet baseline output
]

# Warning filters for clean test output
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:.*playwright.*",
]

# Custom test markers for AI/vector DB/web scraping project
markers = [
    "accessibility: mark test as accessibility test",
    "ai: mark test as AI/ML specific",
    "authentication: mark test as authentication test",
    "authorization: mark test as authorization test",
    "benchmark: mark test as benchmark test",
    "browser: mark test as browser automation test",
    "cli: mark test as CLI-specific",
    "database: mark test as requiring database",
    "e2e: End-to-end tests (full pipeline)",
    "embedding: Embedding-related tests",
    "endurance: mark test as endurance test",
    "fast: Fast unit tests (<100ms each)",
    "integration: Integration tests (<5s each)",
    "interactive: mark test as requiring interactive features",
    "input_validation: mark test as input validation test",
    "load: mark test as load test",
    "hypothesis: mark test as property-based using Hypothesis",
    "performance: Performance and benchmark tests",
    "property: mark test as property-based test",
    "questionary: mark test as requiring questionary interactions",
    "rag: RAG system tests",
    "rate_limit: mark test as rate limit test",
    "respx: mark test as using respx HTTP mocking",
    "rich: mark test as requiring Rich console features",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "spike: mark test as spike test",
    "stress: mark test as stress test",
    "unit: marks tests as unit tests",
    "vector_db: Vector database tests",
    "volume: mark test as volume test",
    "vulnerability: mark test as vulnerability test",
    "asyncio: marks tests as async tests",
]

# Logging configuration for tests
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Parallel execution settings for CI/CD
addopts_parallel = ["--dist=worksteal", "--tx=auto", "-q"]

[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
fail_under = 80.0

# ===== UV Package Manager Configuration =====
[tool.uv]
managed = true
package = true
# UV performance optimizations
compile-bytecode = true
link-mode = "copy" # Better for Docker builds
upgrade-package = [
    "pip",
    "setuptools",
    "wheel",
    "hatchling",
] # Keep core tools updated
resolution = "highest" # Prefer latest compatible versions
python-preference = "managed" # Better Python version management

# Python 3.11-3.13 compatibility constraints
constraint-dependencies = [
    "setuptools>=70.0.0", # Ensure Python 3.13 compatible setuptools
    "hatchling>=1.25.0",  # Ensure Python 3.13 compatible hatchling
]

# Extra build dependencies for packages that need torch during build
extra-build-dependencies = { flash-attn = [{ requirement = "torch", match-runtime = true }] }

# Build environment variables for flash-attn
extra-build-variables = { flash-attn = { FLASH_ATTENTION_SKIP_CUDA_BUILD = "TRUE" } }

# ===== Dependency Groups =====
[tool.pylint]
[tool.pylint.main]
# Basic configuration
extension-pkg-allow-list = ["pydantic"]
reports = false
score = true

[tool.pylint.messages_control]
# Conservative disable list - only genuinely problematic rules
disable = [
    "too-few-public-methods",  # Common in test classes with just __init__
    "missing-class-docstring", # Test classes often don't need docstrings
    "missing-function-docstring", # Test functions often don't need docstrings
    "invalid-name", # Test functions/methods often use unconventional names
    "protected-access", # Tests often need to access protected members
    "broad-except", # Tests may use broad exception handling for mocking
    # Test-specific rules that are commonly problematic
    "unused-argument", # W0613 - Fixtures and mocks often have unused parameters
    "redefined-outer-name", # W0621 - Common when fixtures redefine names
    "pointless-string-statement", # W0105 - Duplicate docstrings in test classes
    "line-too-long", # C0301 - Test code often has long lines due to complex setup
]

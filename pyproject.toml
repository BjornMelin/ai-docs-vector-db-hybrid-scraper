[project]
name = "ai-docs-vector-db-hybrid-scraper"
version = "0.1.0"
description = "ðŸš€ Hybrid AI documentation scraping system combining Crawl4AI (bulk) + Firecrawl MCP (on-demand) with Qdrant vector database for Claude Desktop/Code integration"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.11,<3.13"
authors = [{ name = "BjornMelin", email = "your-email@example.com" }]
keywords = [
    "ai",
    "vector-database",
    "documentation",
    "scraping",
    "crawl4ai",
    "firecrawl",
    "qdrant",
    "claude",
    "mcp",
    "embeddings",
    "search",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]

dependencies = [
    # Core web framework & API
    "fastapi>=0.115.12,<0.116.0",
    "starlette>=0.41.0,<0.42.0", # Compatible with FastAPI 0.115.12
    "uvicorn[standard]>=0.34.2,<0.35.0",
    "python-multipart>=0.0.12,<0.1.0", # For FastAPI file uploads
    # Data validation & configuration
    "pydantic>=2.11.5,<3.0.0", # browser-use 0.2.6 compatibility
    "pydantic-settings>=2.8.0,<3.0.0",
    "python-dotenv>=1.1.0,<2.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    # Core web scraping
    "crawl4ai[all]>=0.6.3",
    "firecrawl-py>=2.7.1",
    # Vector database & embeddings
    "qdrant-client[fastembed]>=1.14.2,<2.0.0",
    "openai>=1.82.1,<2.0.0",
    "fastembed>=0.6.1,<0.7.0", # Keep constraint - Python 3.13 incompatible in 0.7+
    "FlagEmbedding>=1.3.5,<2.0.0",
    # Data processing & ML (Python 3.13 compatible)
    "pandas>=2.2.3,<3.0.0",
    "numpy>=1.24.0,<2.0.0", # Compatible with browser-use and Python 3.12
    "scipy>=1.15.3,<2.0.0", # Python 3.13 support from 1.13+
    "defusedxml>=0.7.1,<0.8.0", # Secure XML parsing
    # HTTP & async (optimized for performance)
    "aiohttp>=3.12.4,<4.0.0", # Kept for superior async performance
    "asyncio-throttle>=1.0.2,<2.0.0",
    "aiofiles>=24.1.0,<25.0.0",
    # Circuit breaker & retry patterns
    "tenacity>=9.1.0,<10.0.0", # Advanced retry and circuit breaker patterns
    # MCP framework
    "mcp>=1.9.2,<2.0.0",
    "fastmcp>=2.5.2,<3.0.0",
    # Caching & task queue
    "redis[hiredis]>=6.2.0,<7.0.0",
    "arq>=0.25.0,<0.27.0",
    # CLI & user interface
    "click>=8.2.1,<9.0.0",
    "rich>=14.0.0,<15.0.0",
    "colorlog>=6.9.0,<7.0.0",
    "tqdm>=4.67.1,<5.0.0",
    "questionary>=2.1.0,<3.0.0",
    # Monitoring & observability
    "prometheus-client>=0.21.1,<0.22.0",
    "prometheus-fastapi-instrumentator>=7.0.0,<8.0.0",
    "psutil>=7.0.0,<8.0.0", # Updated for browser-use 0.2.6+ compatibility
    # Database & ORM
    "sqlalchemy>=2.0.0,<3.0.0",
    # Utility libraries
    "tomli-w>=1.0.0,<2.0.0",
    "jsonschema2md>=1.5.2,<2.0.0",
    "opentelemetry-api>=1.34.1",
    "opentelemetry-sdk>=1.34.1",
]

[project.optional-dependencies]
# Development tools
dev = [
    "pytest>=8.3.5,<9.0.0",
    "pytest-asyncio>=1.0.0,<2.0.0",
    "pytest-cov>=6.1.1,<7.0.0",
    "pytest-mock>=3.14.1,<4.0.0",
    "pytest-timeout>=2.3.1,<3.0.0",
    "pytest-xdist>=3.5.0,<4.0.0", # Parallel test execution
    "hypothesis>=6.133.0,<7.0.0",  # Property-based testing
    "mutmut>=2.5.1,<3.0.0",       # Mutation testing
    "fakeredis>=2.29.0,<3.0.0",
    "ruff>=0.11.12,<0.12.0",
    "black>=25.1.0,<26.0.0",
]

# Contract testing tools
contract = [
    "schemathesis>=3.21.0,<4.1.0",        # OpenAPI property-based testing
    "openapi-spec-validator>=0.7.0,<0.9.0", # OpenAPI spec validation
    "jsonschema>=4.23.0,<5.0.0",         # JSON schema validation
    # "pact-python>=2.3.1,<3.0.0",         # Pact consumer-driven contracts - temporarily disabled due to psutil conflict
    "responses>=0.25.0,<0.26.0",          # HTTP request mocking
    "httpx>=0.28.1,<0.29.0",              # HTTP client for testing
    "factory-boy>=3.3.1,<4.0.0",         # Test data generation
    "faker>=36.1.0,<37.0.0",              # Fake data generation
]

# Accessibility testing tools
accessibility = [
    "axe-core-python>=0.1.0,<1.0.0",  # Python bindings for axe-core (using available version)
    "selenium>=4.25.0,<5.0.0",        # For browser automation
    "playwright>=1.52.0,<2.0.0",      # Alternative browser automation
    "beautifulsoup4>=4.12.3,<5.0.0",  # HTML parsing for static analysis
    "lxml>=5.3.0,<6.0.0",             # XML/HTML parser
]

# Browser automation (optional heavy dependencies)
browser = [
    "playwright>=1.52.0,<2.0.0", # Python 3.13 compatible
    "browser-use>=0.2.6,<0.3.0", # Python 3.13 compatibility
]

# LangChain integrations (optional AI features)  
llm = [
    "langchain-openai>=0.3.11,<1.0.0",
    "langchain-anthropic>=0.3.0,<1.0.0",
    "langchain-google-genai>=2.0.0,<3.0.0",
]

# Observability and tracing (optional monitoring features)
observability = [
    "opentelemetry-api>=1.34.1,<2.0.0",
    "opentelemetry-sdk>=1.34.1,<2.0.0",
    "opentelemetry-instrumentation-fastapi>=0.54b0,<1.0.0",
    "opentelemetry-exporter-prometheus>=0.54b1,<1.0.0",
    "opentelemetry-instrumentation-starlette>=0.54b0,<1.0.0", # For Starlette instrumentation
]

# Code parsing tools (optional development features)
parsing = [
    "tree-sitter>=0.24.0,<0.25.0",
    "tree-sitter-python>=0.23.6,<0.24.0",
    "tree-sitter-javascript>=0.23.1,<0.24.0",
    "tree-sitter-typescript>=0.23.2,<0.24.0",
]

# Documentation tools (moved from docs/requirements.txt)
docs = [
    "mkdocs>=1.6.0,<2.0.0",
    "mkdocs-material>=9.5.0,<10.0.0", 
    "mkdocstrings>=0.24.0,<1.0.0",
    "mkdocstrings-python>=1.8.0,<2.0.0",
    "pdoc3>=0.11.6,<1.0.0",
    "sphinx>=8.2.0,<9.0.0",
    "sphinx-rtd-theme>=3.0.0,<4.0.0",
    "interrogate>=1.7.0,<2.0.0",
]

# All optional dependencies combined
all = [
    "ai-docs-vector-db-hybrid-scraper[dev,accessibility,browser,llm,observability,parsing,docs]",
]

[project.urls]
Homepage = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Repository = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Issues = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper/issues"

[project.scripts]
ai-docs = "src.cli.main:main"
manage-db = "src.manage_vector_db:main"
mcp-server = "src.unified_mcp_server:main"
task-worker = "src.cli_worker:main"

[build-system]
requires = [
    "hatchling>=1.18.0",
    "setuptools>=68.0.0",
    "wheel>=0.40.0"
]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
managed = true
package = true

# ===== Simplified Ruff Configuration =====
[tool.ruff]
line-length = 88
target-version = "py312"
src = ["src", "tests", "examples"]
exclude = ["scripts"]

[tool.ruff.lint]
# Basic but comprehensive rule selection
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "RUF", # Ruff-specific rules
    "PL",  # pylint (basic subset)
]

ignore = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",    # Missing docstrings
    "PLR0911", # Too many return statements
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments
    "PLR0915", # Too many statements
    "PLR2004", # Magic value used in comparison
    "E501",    # Line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "ANN", "S101", "PLR"]
"examples/**/*" = ["D", "ANN", "T201", "F841"]

[tool.ruff.lint.isort]
force-single-line = true

# ===== Black Configuration =====
[tool.black]
line-length = 88
target-version = ['py313']

# ===== Pytest Configuration =====
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]

# Clean output formatting
addopts = [
    "--tb=short",         # Shorter traceback format
    "--strict-markers",   # Treat unknown markers as errors
    "--disable-warnings", # Disable pytest warnings for cleaner output
    "--no-header",        # Remove pytest header
    "-ra",                # Show short test summary for all except passed
    "--maxfail=5",        # Stop after 5 failures
]

# Test discovery
minversion = "8.0"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "performance: marks tests as performance tests",
    "asyncio: marks tests as async tests",
    "benchmark: marks tests as benchmark tests",
    "hypothesis: marks tests as property-based tests using Hypothesis",
    # Security testing markers
    "security: mark test as security test",
    "vulnerability_scan: mark test as vulnerability scan test",
    "penetration_test: mark test as penetration test",
    "owasp: mark test as OWASP compliance test",
    "input_validation: mark test as input validation test",
    "authentication: mark test as authentication test",
    "authorization: mark test as authorization test",
    "compliance: mark test as compliance test",
    # Performance testing markers
    "memory_test: mark test as memory test",
    "cpu_test: mark test as CPU test",
    "throughput: mark test as throughput test",
    "latency: mark test as latency test",
    "scalability: mark test as scalability test",
    # Accessibility testing markers
    "accessibility: mark test as accessibility test",
    "a11y: mark test as general accessibility test",
    "wcag: mark test as WCAG compliance test",
    "screen_reader: mark test as screen reader test",
    "keyboard_navigation: mark test as keyboard navigation test",
    "color_contrast: mark test as color contrast test",
    "aria: mark test as ARIA attributes test",
    # Contract testing markers
    "contract: mark test as contract test",
    "api_contract: mark test as API contract test",
    "schema_validation: mark test as schema validation test",
    "pact: mark test as Pact contract test",
    "openapi: mark test as OpenAPI contract test",
    "consumer_driven: mark test as consumer-driven contract test",
    # Chaos engineering markers
    "chaos: mark test as chaos engineering test",
    "fault_injection: mark test as fault injection test",
    "resilience: mark test as resilience test",
    "failure_scenarios: mark test as failure scenario test",
    "network_chaos: mark test as network chaos test",
    "resource_exhaustion: mark test as resource exhaustion test",
    "dependency_failure: mark test as dependency failure test",
    # Load testing markers
    "load: mark test as load test",
    "stress: mark test as stress test",
    "spike: mark test as spike test",
    "endurance: mark test as endurance test",
    "volume: mark test as volume test",
]

# Logging configuration for tests
log_cli = false
log_cli_level = "WARNING"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Test execution profiles for optimized CI/CD
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:.*playwright.*",
]

# Parallel execution settings
addopts_parallel = [
    "--dist=worksteal",
    "--tx=auto",
    "-q",
]

# ===== Coverage Configuration =====
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
fail_under = 38.0
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "\\.\\.\\.",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.1",
    "coverage>=7.6.0",
    "ruff>=0.11.13",
    "pytest-benchmark>=5.1.0",
    "hypothesis>=6.135.14",
    "pytest-xdist>=3.7.0",
    "mutmut>=2.5.1",
    "locust>=2.37.10",
    "pyjwt>=2.10.1",
]

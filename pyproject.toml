[project]
name = "ai-docs-vector-db-hybrid-scraper"
version = "0.1.0"
description = "ðŸš€ Hybrid AI documentation scraping system combining Crawl4AI (bulk) + Firecrawl MCP (on-demand) with Qdrant vector database for Claude Desktop/Code integration"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.13"
authors = [
    { name = "BjornMelin", email = "your-email@example.com" }
]
keywords = [
    "ai", "vector-database", "documentation", "scraping", "crawl4ai", 
    "firecrawl", "qdrant", "claude", "mcp", "embeddings", "search"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: Indexing/Search",
]

dependencies = [
    "crawl4ai[all]>=0.6.0",
    "qdrant-client>=1.7.0",
    "openai>=1.0.0",
    "aiohttp>=3.8.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "python-dotenv>=1.0.0",
    "colorlog>=6.7.0",
    "tqdm>=4.65.0",
    "playwright>=1.40.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "asyncio-throttle>=1.0.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.7.0",
]

[project.urls]
Homepage = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Repository = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper"
Issues = "https://github.com/BjornMelin/ai-docs-vector-db-hybrid-scraper/issues"

[project.scripts]
scrape-docs = "src.crawl4ai_bulk_embedder:main"
manage-db = "src.manage_vector_db:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.uv]
managed = true
package = false

[tool.ruff]
line-length = 88
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
    "PL",     # pylint (basic subset)
]

ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105",  # Missing docstrings
    "PLR0913",  # Too many arguments
    "PLR2004",  # Magic value used in comparison
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["D", "ANN", "S101", "PLR"]
"examples/**/*" = ["D", "ANN", "T201", "F841"]

[tool.ruff.lint.isort]
force-single-line = true

[tool.black]
line-length = 88
target-version = ['py313']

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_functions = ["test_*"]

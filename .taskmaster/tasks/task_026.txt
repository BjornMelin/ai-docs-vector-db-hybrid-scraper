# Task ID: 26
# Title: Type-annotation modernisation & static type checks
# Status: pending
# Dependencies: 21, 22
# Priority: medium
# Description: Apply Ruff's UP00x autofixes to modernise type syntax across 136 files and implement comprehensive mypy static type checking against Python 3.13 to ensure type safety and compatibility.
# Details:
1. Configure and execute Ruff UP00x rules for type annotation modernisation:
   - Apply UP006 (use `list` instead of `List`), UP007 (use `X | Y` instead of `Union[X, Y]`), UP035 (use `dict` instead of `Dict`), and related UP00x rules
   - Run `ruff check --select UP00 --fix .` to automatically modernise legacy typing imports and annotations
   - Update type annotations to use Python 3.10+ union syntax (X | Y) and built-in generics (list[str], dict[str, int])
   - Remove unnecessary `from typing import` statements for built-in types

2. Implement comprehensive mypy static type checking:
   - Add mypy to development dependencies in pyproject.toml with Python 3.13 target
   - Create mypy.ini configuration file with strict type checking enabled, targeting Python 3.13 compatibility
   - Configure mypy to check all 136 source files with appropriate exclude patterns for generated code
   - Set strict mode flags: disallow_untyped_defs, disallow_any_generics, warn_return_any, warn_unused_ignores

3. Resolve type annotation issues systematically:
   - Address mypy errors in core modules: embeddings, vector operations, API endpoints, and configuration
   - Add missing type annotations to function signatures, class attributes, and return types
   - Fix generic type usage for collections, async functions, and FastAPI dependencies
   - Implement proper typing for Pydantic models and serialization

4. Integrate type checking into development workflow:
   - Add pre-commit hook for mypy type checking
   - Update CI/CD pipeline to run mypy as part of quality gates
   - Configure IDE integration for real-time type checking feedback

# Test Strategy:
1. Verify Ruff modernisation results:
   - Run `ruff check --select UP00 .` to confirm no remaining UP00x violations
   - Execute `python -m py_compile` on all modified files to ensure syntax validity
   - Compare before/after type annotation syntax to confirm proper modernisation

2. Validate mypy type checking implementation:
   - Execute `uv run mypy src/` to ensure zero type errors across all 136 files
   - Test mypy configuration with incremental checking and cache functionality
   - Verify mypy correctly identifies intentionally introduced type errors

3. Integration testing:
   - Run full test suite to ensure type changes don't break runtime functionality
   - Execute `uv run pytest --mypy` if pytest-mypy is configured
   - Validate that all imports and type hints work correctly under Python 3.13

4. CI/CD validation:
   - Confirm mypy runs successfully in GitHub Actions pipeline
   - Test that type checking failures properly fail the build
   - Verify pre-commit hooks execute mypy checks on staged files

# Subtasks:
## 1. Configure and Execute Ruff UP00x Autofixes for Type Annotation Modernisation [pending]
### Dependencies: None
### Description: Set up Ruff with UP00x rules (including UP006, UP007, UP035) to modernise type annotations across all 136 files, ensuring migration to Python 3.10+ syntax and removal of obsolete typing imports.
### Details:
Install Ruff, configure the linter to select UP00x rules, and run `ruff check --select UP00 --fix .` to automatically update type annotations to use built-in generics (e.g., list[str], dict[str, int]) and the union operator (|). Remove unnecessary `from typing import` statements for built-in types.

## 2. Add and Configure mypy for Python 3.13 Static Type Checking [pending]
### Dependencies: 26.1
### Description: Integrate mypy into the development environment, targeting Python 3.13, and enable strict type checking across the codebase.
### Details:
Add mypy to development dependencies in pyproject.toml, create a mypy.ini with strict mode flags (disallow_untyped_defs, disallow_any_generics, warn_return_any, warn_unused_ignores), and configure it to check all 136 source files with appropriate excludes for generated code.

## 3. Systematically Resolve mypy Type Annotation Issues [pending]
### Dependencies: 26.2
### Description: Address all mypy-reported errors and warnings by updating or adding type annotations, fixing generic usage, and ensuring compatibility with Python 3.13.
### Details:
Iterate through mypy output, updating function signatures, class attributes, return types, and generic collections. Ensure correct typing for async functions, FastAPI dependencies, and Pydantic models.

## 4. Integrate Type Checking into Development Workflow [pending]
### Dependencies: 26.3
### Description: Automate type checking by adding mypy to pre-commit hooks, CI/CD pipelines, and IDE integrations for continuous feedback.
### Details:
Configure pre-commit to run mypy before commits, update CI/CD scripts to include mypy as a quality gate, and set up IDE plugins for real-time type checking.

## 5. Validate and Document Type Annotation Modernisation and Type Safety [pending]
### Dependencies: 26.4
### Description: Review the modernised codebase for consistency, document the new type annotation standards, and provide guidance for future contributions.
### Details:
Perform a final review to confirm all files use modern type syntax, update developer documentation to reflect new standards, and outline best practices for maintaining type safety.


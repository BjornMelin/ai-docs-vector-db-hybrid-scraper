# Task ID: 40
# Title: Redis-Backed Session Persistence Functions
# Status: pending
# Dependencies: 38
# Priority: medium
# Description: Persist / restore browser sessions via existing Redis cluster to reach ≥80 % reuse.
# Details:
1. Module `src/browser_use/session_store.py`:
   ```py
   from redis.asyncio import Redis
   r = Redis.from_url(cfg.redis_url, decode_responses=False)
   KEY_TMPL = "browser:session:{fingerprint}"
   async def save(session: BrowserSession):
       await r.set(KEY_TMPL.format(...), session.export(), ex=86400)
   async def restore(fingerprint:str)->BrowserSession|None:
       data = await r.get(KEY_TMPL.format(...));
       if data: return BrowserSession.import_(data)
   ```
2. Hook into agent lifecycle: on close → save(); before start → attempt restore.
3. Use `orjson` for serialization.
4. Implement affinity map `browser:affinity:{agent_id}`.
5. TTL cleanup job via Redis keyspace notifications.
6. Expose Prometheus counters: `session_reused_total`, `session_miss_total`.

# Test Strategy:
• Unit tests with `fakeredis` mock.
• Benchmark: 100 session cycles – `reuse_rate >=0.8`.
• Chaos test: kill Redis → agents fall back gracefully.
• Redis MONITOR ensures only ≥1 command per session reuse.

# Subtasks:
## 1. Implement Redis-Backed Session Save and Restore Functions [pending]
### Dependencies: None
### Description: Develop asynchronous functions to persist and restore browser sessions using the existing Redis cluster, ensuring serialization with orjson and correct key templating.
### Details:
Create or update functions in `src/browser_use/session_store.py` to save sessions on close and restore them before agent start. Use orjson for serialization and ensure sessions are stored with a TTL of 86400 seconds. Handle missing or corrupted data gracefully.

## 2. Integrate Session Persistence into Agent Lifecycle and Affinity Mapping [pending]
### Dependencies: 40.1
### Description: Hook session save/restore into the agent lifecycle and implement the affinity map to associate agents with session fingerprints.
### Details:
Modify agent lifecycle hooks to call save on close and attempt restore before start. Implement and maintain the `browser:affinity:{agent_id}` mapping in Redis to track agent-session associations.

## 3. Implement TTL Cleanup, Monitoring, and Metrics Exposure [pending]
### Dependencies: 40.2
### Description: Set up Redis keyspace notifications for TTL cleanup and expose Prometheus counters for session reuse and misses.
### Details:
Configure Redis to emit keyspace notifications for session expiration. Implement a cleanup job if needed. Add Prometheus metrics `session_reused_total` and `session_miss_total` to monitor session persistence effectiveness.


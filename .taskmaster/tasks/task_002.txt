# Task ID: 2
# Title: Consolidate Configuration Files
# Status: in-progress
# Dependencies: 1
# Priority: high
# Description: Modernize and consolidate 21 legacy config files into 3 core Python modules using automation, smart defaults, and developer-centric patterns. Leverage Pydantic V2 BaseSettings for robust schema validation, multi-alias environment variable support, and declarative GitOps-ready configuration. Integrate auto-detection for Docker, local, and cloud services, and provide interactive setup via a Rich-powered CLI wizard. Support environment-based feature flags, audit trails, and zero-downtime updates to optimize developer experience and enterprise automation.
# Details:
1. Complete the consolidation of remaining legacy config files into core.py, profiles.py, and auto_detect.py, building on the existing Pydantic V2 BaseSettings structure with CacheConfig, QdrantConfig, OpenAIConfig, FastEmbedConfig, FirecrawlConfig, Crawl4AIConfig, ChunkingConfig, and EmbeddingConfig models.
2. Enhance the existing SmartConfig implementation to fully support multi-alias environment variables (e.g., OPENAI_API_KEY, AI_DOCS__OPENAI__API_KEY).
3. Add service auto-detection for Redis 8, Qdrant with connection pooling, Supabase/Neon databases, and modern container orchestration (StatefulSets, edge deployment).
4. Expand the 7 existing profile templates in config/templates/ to fully support local-dev, cloud-prod, and enterprise profiles with environment-based feature flags and declarative GitOps patterns.
5. Ensure backward compatibility with existing config files and provide zero-downtime configuration updates with validation and audit trail for all changes.
6. Implement an interactive setup wizard using the Rich CLI library with real-time validation, enabling one-command setup (./setup.sh --profile local-dev) and reducing setup complexity by 95%.
7. Demonstrate DevOps automation, enterprise configuration management, security-first practices with secrets management, and developer experience optimization throughout the implementation.

# Test Strategy:
1. Unit test SmartConfig class, multi-alias env var logic, and enhanced service auto-detection (Redis 8, Qdrant with connection pooling, Supabase/Neon databases).
2. Integration test with local-dev, Docker, and cloud-prod profiles, verifying environment-based feature flags and declarative config updates.
3. Verify backward compatibility and zero-downtime updates with legacy config files.
4. Test audit trail logging for all configuration changes and secrets management security practices.
5. Measure and verify setup time reduction to under 5 minutes using the interactive Rich CLI wizard with real-time validation.
6. Test integration with modern container orchestration (StatefulSets, edge deployment).

# Subtasks:
## 1. Design Unified Configuration Schema and Smart Defaults [done]
### Dependencies: None
### Description: Extend the existing Pydantic v2 BaseSettings implementation in core.py to complete the unified configuration schema. Enhance smart defaults, fully implement multi-alias environment variable support, and ensure clear separation of core, profile, and auto-detection modules. Ensure schema remains concise (under 200 lines) and supports layered configuration for local, cloud, and enterprise environments.
### Details:
Build upon the existing CacheConfig, QdrantConfig, OpenAIConfig, FastEmbedConfig, FirecrawlConfig, Crawl4AIConfig, ChunkingConfig, and EmbeddingConfig models. Enhance validation and type enforcement to prevent runtime errors. Complete documentation for all configuration options and defaults for developer onboarding.
<info added on 2025-06-22T20:11:23.510Z>
COMPLETED: Configuration Import Cleanup subagent successfully standardized all config imports to use src.config pattern across 40+ files. All import statements now follow modern Python patterns with zero deprecated config files remaining. This addresses the core configuration consolidation requirement by ensuring consistent import patterns throughout the codebase.
</info added on 2025-06-22T20:11:23.510Z>

## 2. Implement Automated Configuration Consolidation and Migration [done]
### Dependencies: 2.1
### Description: Develop automation scripts to migrate and consolidate remaining legacy config files into the new core.py, profiles.py, and auto_detect.py modules. Ensure backward compatibility, audit trails, and zero-downtime updates during migration.
### Details:
Use Python automation (e.g., scripts or Ansible) to parse, validate, and transform legacy configs. Integrate audit logging for all changes. Provide rollback and validation mechanisms to ensure safe migration. Build on the existing configuration structure in core.py and the 7 profile templates in config/templates/. Leverage the standardized src.config import pattern now implemented across all 40+ files to ensure smooth transition to the new configuration system.

## 3. Develop Service Auto-Detection and Environment Profiling [pending]
### Dependencies: 2.2
### Description: Implement auto-detection logic for Docker, local, and cloud environments. Automatically discover and configure services such as Redis 8, Qdrant with connection pooling, and Supabase/Neon databases. Support environment-based feature flags and declarative GitOps patterns.
### Details:
Use async patterns and dependency injection for efficient service discovery. Integrate with environment metadata and service APIs for robust detection. Ensure configuration profiles adapt dynamically to detected environments. Implement connection pooling for Qdrant and optimize for Redis 8 features. Build on the foundation of standardized config imports to ensure consistent service detection across the application.

## 4. Build Interactive Rich CLI Setup Wizard [done]
### Dependencies: 2.3
### Description: Create an interactive CLI wizard using the Rich library to guide developers through configuration setup with real-time validation. Support one-command setup (e.g., ./setup.sh --profile local-dev), environment selection, and automated migration from legacy configurations.
### Details:
Design CLI flows for all supported profiles and environments. Provide contextual help, real-time validation feedback, and audit logging. Minimize setup complexity and optimize for developer experience. Include automated migration paths from legacy configurations. Utilize the now-standardized src.config import pattern to ensure the wizard generates configurations that work seamlessly with the updated codebase.

## 5. Integrate Observability, Testing, and Production Automation [pending]
### Dependencies: 2.4
### Description: Embed OpenTelemetry-based observability, property-based and mutation testing, and CI/CD automation for configuration deployment. Ensure secure, monitored, and production-ready configuration management with zero-downtime updates.
### Details:
Instrument configuration modules with OpenTelemetry for traceability. Automate deployment and validation via CI/CD pipelines. Enforce security-first practices (e.g., encryption, secrets management, access controls) and monitor for configuration drift.

## 6. Implement Container Orchestration Integration [pending]
### Dependencies: 2.3
### Description: Integrate configuration management with modern container orchestration, supporting StatefulSets and edge deployment scenarios. Ensure configuration is GitOps-ready and compatible with 2025 deployment patterns.
### Details:
Design configuration structures that work seamlessly with Kubernetes StatefulSets, edge computing deployments, and GitOps workflows. Implement configuration discovery and adaptation for containerized environments. Support dynamic reconfiguration without container restarts.

## 7. Enhance Security with Secrets Management [pending]
### Dependencies: 2.1
### Description: Implement security-first practices with comprehensive secrets management integration. Support secure storage, rotation, and access control for sensitive configuration values.
### Details:
Integrate with secrets management solutions (HashiCorp Vault, AWS Secrets Manager, etc.). Implement secure defaults, automatic rotation, and least-privilege access patterns. Provide audit trails for all secrets access and changes.

## 8. Complete Profile Templates and Environment-Based Feature Flags [pending]
### Dependencies: 2.1
### Description: Expand the existing 7 profile templates in config/templates/ to fully support local-dev, cloud-prod, and enterprise environments with comprehensive feature flags and configuration options.
### Details:
Review and enhance the existing profile templates to ensure they cover all required environments. Implement environment-based feature flags that allow for easy toggling of functionality based on deployment context. Ensure templates follow GitOps-ready patterns and support declarative configuration.

## 9. Finalize Multi-Alias Environment Variable Support [pending]
### Dependencies: 2.1
### Description: Complete the implementation of multi-alias environment variable support in the existing Pydantic V2 BaseSettings structure to allow for flexible configuration via environment variables.
### Details:
Enhance the existing partial implementation to fully support multiple aliases for each configuration option (e.g., OPENAI_API_KEY, AI_DOCS__OPENAI__API_KEY). Ensure proper precedence rules and validation for all environment variables. Document the supported aliases for developer reference.

## 10. Leverage Standardized Import Patterns for Remaining Configuration Tasks [pending]
### Dependencies: 2.1
### Description: Build on the completed standardization of src.config import patterns across 40+ files to implement the remaining configuration consolidation tasks.
### Details:
Utilize the now-consistent import pattern as the foundation for implementing the remaining configuration modules. Ensure all new configuration components (core.py, profiles.py, auto_detect.py) are properly integrated with the standardized import system. Document the import pattern for future development and onboarding.


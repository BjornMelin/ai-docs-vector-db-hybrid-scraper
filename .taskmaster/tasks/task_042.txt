# Task ID: 42
# Title: Observability & Metrics Integration
# Status: pending
# Dependencies: 39, 40, 41, 20
# Priority: medium
# Description: Expose browser-use traces & custom Prometheus metrics within existing OpenTelemetry → Prometheus → Grafana pipeline.
# Details:
1. Instrument code with `@tracer.start_as_current_span` for major steps (agent_acquire, page_fetch, session_restore).
2. Create metrics module:
   ```py
   from prometheus_client import Counter, Gauge
   active_agents = Gauge("browser_active_agents", "Running browser sessions")
   session_reuse = Counter("browser_session_reuse_total", ...)
   ```
3. FastAPI startup event registers collectors.
4. Update Grafana dashboard JSON with new panels.
5. Health endpoint `/health/browser` returns current agent stats + Redis ping time.
6. Confirm <5 % CPU overhead via `otel_batch_span_processor(max_queue_size=4096)`.

# Test Strategy:
• `promtool` rules test passes.
• Curl `/metrics` – new metrics present.
• Grafana dashboard loads with data.
• Benchmark shows <5 % overhead toggling instrumentation.

# Subtasks:
## 1. Instrument Browser Code with OpenTelemetry Tracing [pending]
### Dependencies: None
### Description: Add OpenTelemetry tracing to major browser-use steps (agent_acquire, page_fetch, session_restore) using @tracer.start_as_current_span.
### Details:
Ensure all critical browser operations are wrapped with trace spans to capture detailed execution flow for observability.

## 2. Implement Custom Prometheus Metrics Module [pending]
### Dependencies: 42.1
### Description: Create a metrics module using prometheus_client to expose custom metrics such as active_agents (Gauge) and session_reuse (Counter).
### Details:
Define and register all required metrics, ensuring they are updated appropriately during browser session lifecycle events.

## 3. Register Metrics Collectors on FastAPI Startup [pending]
### Dependencies: 42.2
### Description: Integrate the metrics module with FastAPI by registering collectors during the application startup event.
### Details:
Ensure all metrics are initialized and available before handling requests; confirm /metrics endpoint exposes new metrics.

## 4. Update Grafana Dashboard with New Panels [pending]
### Dependencies: 42.3
### Description: Modify the existing Grafana dashboard JSON to add panels visualizing the new browser-use traces and custom metrics.
### Details:
Configure Grafana to use Prometheus as a data source and create panels for active_agents, session_reuse, and trace visualizations.

## 5. Implement and Test Browser Health Endpoint [pending]
### Dependencies: 42.3
### Description: Develop the /health/browser endpoint to return current agent stats and Redis ping time for health monitoring.
### Details:
Expose a FastAPI endpoint that aggregates agent metrics and Redis latency, returning a structured health report.

## 6. Validate Performance Overhead and Optimize Batch Processing [pending]
### Dependencies: 42.4, 42.5
### Description: Measure and confirm that OpenTelemetry tracing and metrics integration add less than 5% CPU overhead, tuning otel_batch_span_processor as needed.
### Details:
Benchmark application CPU usage before and after observability integration; adjust max_queue_size and batch settings for optimal performance.


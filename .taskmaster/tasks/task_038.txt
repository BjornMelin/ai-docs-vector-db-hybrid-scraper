# Task ID: 38
# Title: FastAPI & MCP Integration of browser-use APIs
# Status: pending
# Dependencies: 36, 37, 4
# Priority: high
# Description: Embed browser-use endpoints and MCP tools into existing FastAPI app without creating a new service.
# Details:
1. Add router file `src/api/browser.py`:
   ```py
   router = APIRouter(prefix="/api/v1/browser")
   @router.post("/scrape")
   async def scrape(request: ScrapeRequest, cfg=Depends(get_browser_use_settings), session=Depends(get_multi_agent_session)): ...
   ```
2. In `main.py`: `app.include_router(browser_router, prefix="/api/v1/browser")`.
3. Hook middleware stack: CORS, auth, rate-limit stay unchanged.
4. Migrate v0.2.x calls →
   ```py
   session = BrowserSession(browser_profile=profile)
   await session.start()
   try:
       ...
   finally:
       await session.close()
   ```
5. Add MCP tools in `mcp/server.py`:
   ```py
   @mcp.tool()
   async def browser_multi_agent_scrape(...): ...
   ```
6. Re-generate OpenAPI docs; ensure endpoints appear.
7. Use dependency override in tests for mocking.
8. Keep feature flag `BROWSER_USE_ENABLED` for graceful fallback.

# Test Strategy:
• FastAPI `TestClient` integration tests hit `/api/v1/browser/scrape` → 200.
• Swagger UI shows new paths.
• MCP registry lists 2 new tools.
• Load test (locust) with 50 RPS → no regressions.

# Subtasks:
## 1. Add Browser API Router to FastAPI App [pending]
### Dependencies: None
### Description: Create and integrate the `src/api/browser.py` router file with browser-use endpoints, such as `/scrape`, and include it in the main FastAPI application.
### Details:
Define the router with the appropriate prefix and endpoints. In `main.py`, use `app.include_router(browser_router, prefix="/api/v1/browser")` to register the router.

## 2. Preserve and Configure Middleware Stack [pending]
### Dependencies: 38.1
### Description: Ensure that the existing middleware stack (CORS, authentication, rate limiting) remains unchanged and is compatible with the new browser-use endpoints.
### Details:
Review middleware configuration in `main.py` and confirm that new endpoints are protected and accessible as intended.

## 3. Migrate Legacy v0.2.x Browser Session Calls [pending]
### Dependencies: 38.1
### Description: Update all legacy browser session calls to use the new session management pattern with proper async context handling.
### Details:
Replace old session usage with the pattern: `session = BrowserSession(browser_profile=profile); await session.start(); try: ... finally: await session.close()`.

## 4. Integrate MCP Tools into FastAPI App [pending]
### Dependencies: 38.1
### Description: Add MCP tool definitions (e.g., `browser_multi_agent_scrape`) in `mcp/server.py` and mount the MCP server within the FastAPI app.
### Details:
Define MCP tools using `@mcp.tool()` decorators and ensure MCP routes are mounted using `mcp.mount()` and `mcp.setup_server()` as per fastapi-mcp integration guides.

## 5. Update OpenAPI Documentation and Testing Strategy [pending]
### Dependencies: 38.1, 38.4
### Description: Regenerate OpenAPI documentation to include new endpoints and implement dependency overrides for mocking in tests.
### Details:
Ensure all browser-use and MCP endpoints appear in the OpenAPI docs. Use FastAPI's dependency override mechanism to mock dependencies in automated tests.

## 6. Implement and Validate Feature Flag for Browser-Use [pending]
### Dependencies: 38.1, 38.3, 38.4
### Description: Maintain and test the `BROWSER_USE_ENABLED` feature flag to allow graceful fallback if browser-use features are disabled.
### Details:
Ensure all browser-use logic checks the feature flag and provides fallback behavior when disabled.


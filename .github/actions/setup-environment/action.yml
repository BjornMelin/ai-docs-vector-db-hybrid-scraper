name: 'Setup Development Environment'
description: 'Sets up Python, uv, and installs dependencies with optimized caching'

inputs:
  python-version:
    description: 'Python version to set up'
    required: false
    default: '3.12'
  cache-suffix:
    description: 'Additional suffix for cache key differentiation'
    required: false
    default: ''
  install-dev:
    description: 'Install development dependencies'
    required: false
    default: 'true'

outputs:
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.cache.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python ${{ inputs.python-version }}
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6
      with:
        python-version: ${{ inputs.python-version }}

    - name: Install uv
      uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4 # v6.7.0
      with:
        version: "0.8.19"
        enable-cache: true
        cache-dependency-glob: "**/uv.lock"

    - name: Cache Python dependencies
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      id: cache
      with:
        path: |
          ~/.cache/uv
          .venv
        key: python-env-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}${{ inputs.cache-suffix }}
        restore-keys: |
          python-env-${{ runner.os }}-${{ inputs.python-version }}-

    - name: Install dependencies
      shell: bash
      run: |
        set -euo pipefail
        if [ "${{ inputs.install-dev }}" == "true" ]; then
          uv sync --dev --frozen
        else
          uv sync --frozen
        fi

    - name: Verify installation
      shell: bash
      run: |
        set -euo pipefail
        if ! command -v uv >/dev/null 2>&1; then
          echo "uv is not available after setup" >&2
          exit 1
        fi

        uv run python --version
        uv run python -c "import sys; print(f'Python {sys.version}')"

name: Auto Label

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issues:
    types: [opened, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  label-pr:
    name: Label Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Label PR based on files changed
        uses: actions/labeler@v5
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          configuration-path: .github/labeler.yml

      - name: Label PR based on size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/xs'
          xs_max_size: 10
          s_label: 'size/s'
          s_max_size: 100
          m_label: 'size/m'
          m_max_size: 500
          l_label: 'size/l'
          l_max_size: 1000
          xl_label: 'size/xl'
          message_if_xl: |
            This PR is very large. Consider breaking it into smaller PRs for easier review.

      - name: Auto-label based on PR title
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title.toLowerCase();
            const labels = [];
            
            // Check for conventional commit prefixes
            if (title.startsWith('feat:') || title.includes('feature')) {
              labels.push('enhancement');
            }
            if (title.startsWith('fix:') || title.includes('bug')) {
              labels.push('bug');
            }
            if (title.startsWith('docs:') || title.includes('documentation')) {
              labels.push('documentation');
            }
            if (title.startsWith('test:') || title.includes('test')) {
              labels.push('testing');
            }
            if (title.startsWith('ci:') || title.includes('ci/cd')) {
              labels.push('ci/cd');
            }
            if (title.startsWith('refactor:') || title.includes('refactor')) {
              labels.push('refactoring');
            }
            if (title.startsWith('perf:') || title.includes('performance')) {
              labels.push('performance');
            }
            if (title.includes('security') || title.includes('vulnerability')) {
              labels.push('security');
            }
            if (title.includes('breaking') || title.includes('breaking change')) {
              labels.push('breaking-change');
            }
            if (title.includes('wip') || title.includes('work in progress')) {
              labels.push('work-in-progress');
            }
            
            // Add priority labels based on keywords
            if (title.includes('urgent') || title.includes('critical') || title.includes('hotfix')) {
              labels.push('priority-high');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  label-issue:
    name: Label Issue
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    
    steps:
      - name: Auto-label based on issue title and body
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = context.payload.issue.body ? context.payload.issue.body.toLowerCase() : '';
            const content = title + ' ' + body;
            const labels = [];
            
            // Bug-related keywords
            if (content.includes('bug') || content.includes('error') || content.includes('fail') || 
                content.includes('broken') || content.includes('crash') || content.includes('exception')) {
              labels.push('bug');
            }
            
            // Enhancement/feature keywords
            if (content.includes('feature') || content.includes('enhancement') || content.includes('improve') ||
                content.includes('add') || content.includes('new')) {
              labels.push('enhancement');
            }
            
            // Documentation keywords
            if (content.includes('documentation') || content.includes('docs') || content.includes('readme') ||
                content.includes('guide') || content.includes('tutorial')) {
              labels.push('documentation');
            }
            
            // Question keywords
            if (content.includes('question') || content.includes('how to') || content.includes('help') ||
                title.includes('?')) {
              labels.push('question');
            }
            
            // Performance keywords
            if (content.includes('performance') || content.includes('slow') || content.includes('speed') ||
                content.includes('memory') || content.includes('cpu')) {
              labels.push('performance');
            }
            
            // Security keywords
            if (content.includes('security') || content.includes('vulnerability') || content.includes('exploit') ||
                content.includes('cve')) {
              labels.push('security');
            }
            
            // CI/CD keywords
            if (content.includes('ci') || content.includes('workflow') || content.includes('github actions') ||
                content.includes('pipeline') || content.includes('build')) {
              labels.push('ci/cd');
            }
            
            // Testing keywords
            if (content.includes('test') || content.includes('testing') || content.includes('coverage')) {
              labels.push('testing');
            }
            
            // Priority keywords
            if (content.includes('urgent') || content.includes('critical') || content.includes('blocking')) {
              labels.push('priority-high');
            } else if (content.includes('nice to have') || content.includes('minor')) {
              labels.push('priority-low');
            }
            
            // Good first issue indicators
            if (content.includes('good first issue') || content.includes('beginner') || 
                content.includes('easy') || content.includes('starter')) {
              labels.push('good-first-issue');
            }
            
            // Help wanted indicators
            if (content.includes('help wanted') || content.includes('looking for') ||
                content.includes('volunteers') || content.includes('contributors')) {
              labels.push('help-wanted');
            }
            
            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labels
              });
            }

  auto-assign:
    name: Auto Assign
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    
    steps:
      - name: Auto-assign PR to author
        uses: actions/github-script@v7
        with:
          script: |
            // Auto-assign PR to the author
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              assignees: [context.payload.pull_request.user.login]
            });
            
            // Request review from maintainers for external contributions
            if (context.payload.pull_request.user.login !== 'BjornMelin') {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                reviewers: ['BjornMelin']
              });
            }
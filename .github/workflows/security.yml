name: Security Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run pip-audit vulnerability scan
        run: |
          uv tool install pip-audit
          uv tool run pip-audit --format=json --output=pip-audit-results.json --desc
        continue-on-error: true

      - name: Run safety check
        run: |
          uv tool install safety
          uv tool run safety check --json --output safety-results.json || true
        continue-on-error: true

      - name: Run Bandit security linter
        run: |
          uv tool install bandit
          uv tool run bandit -r src/ -f json -o bandit-results.json || true
        continue-on-error: true

      - name: Process security results
        run: |
          echo "## Security Scan Results" > security-summary.md
          echo "" >> security-summary.md
          
          if [ -f "pip-audit-results.json" ]; then
            echo "### Dependency Vulnerabilities (pip-audit)" >> security-summary.md
            if [ -s "pip-audit-results.json" ]; then
              echo "Found vulnerabilities in dependencies:" >> security-summary.md
              uv tool run pip-audit --format=table >> security-summary.md 2>/dev/null || echo "No vulnerabilities found" >> security-summary.md
            else
              echo "✅ No vulnerabilities found" >> security-summary.md
            fi
            echo "" >> security-summary.md
          fi
          
          if [ -f "safety-results.json" ]; then
            echo "### Safety Check Results" >> security-summary.md
            if [ -s "safety-results.json" ] && [ "$(cat safety-results.json)" != "[]" ]; then
              echo "Found security issues:" >> security-summary.md
              cat safety-results.json >> security-summary.md
            else
              echo "✅ No security issues found" >> security-summary.md
            fi
            echo "" >> security-summary.md
          fi
          
          if [ -f "bandit-results.json" ]; then
            echo "### Code Security Issues (Bandit)" >> security-summary.md
            issues=$(cat bandit-results.json | jq -r '.results | length')
            if [ "$issues" -gt 0 ]; then
              echo "Found $issues potential security issues in code:" >> security-summary.md
              uv tool run bandit -r src/ -f txt >> security-summary.md 2>/dev/null || echo "Error running bandit" >> security-summary.md
            else
              echo "✅ No security issues found in code" >> security-summary.md
            fi
          fi

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            pip-audit-results.json
            safety-results.json
            bandit-results.json
            security-summary.md
          retention-days: 30

      - name: Comment security results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Security summary not found or error reading file');
            }

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config: |
            name: "Security focused CodeQL config"
            disable-default-queries: false
            queries:
              - uses: security-and-quality
              - uses: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Check licenses
        run: |
          uv tool install pip-licenses
          echo "## License Report" > license-report.md
          echo "" >> license-report.md
          echo "### Dependency Licenses" >> license-report.md
          echo "" >> license-report.md
          uv tool run pip-licenses --format=markdown >> license-report.md
          
          echo "" >> license-report.md
          echo "### Potential License Issues" >> license-report.md
          echo "" >> license-report.md
          
          # Check for problematic licenses
          problematic_licenses=("GPL" "AGPL" "LGPL" "Copyleft")
          issues_found=false
          
          for license in "${problematic_licenses[@]}"; do
            if uv tool run pip-licenses --format=json | jq -r '.[].License' | grep -i "$license" > /dev/null; then
              echo "⚠️ Found potentially problematic license: $license" >> license-report.md
              issues_found=true
            fi
          done
          
          if [ "$issues_found" = false ]; then
            echo "✅ No problematic licenses detected" >> license-report.md
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.md
          retention-days: 30

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile*') != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          if [ -f "Dockerfile.worker" ]; then
            docker build -f Dockerfile.worker -t security-scan:latest .
          elif [ -f "Dockerfile" ]; then
            docker build -t security-scan:latest .
          else
            echo "No Dockerfile found"
            exit 0
          fi

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint Dockerfile linter
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile.worker
          format: sarif
          output-file: hadolint-results.sarif
          no-fail: true

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: hadolint-results.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-scan, license-check]
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create security summary
        run: |
          echo "# 🔒 Security Pipeline Summary" > SECURITY_SUMMARY.md
          echo "" >> SECURITY_SUMMARY.md
          echo "## Pipeline Results" >> SECURITY_SUMMARY.md
          echo "" >> SECURITY_SUMMARY.md
          echo "| Check | Status |" >> SECURITY_SUMMARY.md
          echo "|-------|--------|" >> SECURITY_SUMMARY.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_SUMMARY.md
          echo "| Secret Detection | ${{ needs.secret-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_SUMMARY.md
          echo "| SAST Analysis | ${{ needs.sast-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_SUMMARY.md
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> SECURITY_SUMMARY.md
          echo "" >> SECURITY_SUMMARY.md
          
          # Add detailed results if available
          if [ -f "security-scan-results/security-summary.md" ]; then
            echo "## Detailed Security Scan Results" >> SECURITY_SUMMARY.md
            cat security-scan-results/security-summary.md >> SECURITY_SUMMARY.md
          fi
          
          if [ -f "license-report/license-report.md" ]; then
            echo "" >> SECURITY_SUMMARY.md
            cat license-report/license-report.md >> SECURITY_SUMMARY.md
          fi

      - name: Upload final security summary
        uses: actions/upload-artifact@v4
        with:
          name: final-security-summary
          path: SECURITY_SUMMARY.md
          retention-days: 30

      - name: Comment security summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const summary = fs.readFileSync('SECURITY_SUMMARY.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Security summary not found or error reading file');
            }

      - name: Fail if critical security issues found
        run: |
          # Check if any critical security job failed
          if [[ "${{ needs.dependency-scan.result }}" == "failure" ]] || \
             [[ "${{ needs.secret-scan.result }}" == "failure" ]]; then
            echo "❌ Critical security issues detected"
            exit 1
          else
            echo "✅ No critical security issues detected"
          fi
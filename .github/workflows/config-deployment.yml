name: Configuration Deployment Automation

on:
  push:
    branches: [main, develop]
    paths:
      - 'config/**'
      - '.github/workflows/config-deployment.yml'
      - 'src/config/**'
      - 'pyproject.toml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'config/**'
      - '.github/workflows/config-deployment.yml'
      - 'src/config/**'
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      config_profile:
        description: 'Configuration profile to deploy'
        required: false
        default: 'auto-detect'
        type: string
      rollback_on_failure:
        description: 'Automatically rollback on deployment failure'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write
  deployments: write
  checks: write

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  UV_SYSTEM_PYTHON: 1
  UV_CACHE_COMPRESSION: 1
  UV_COMPILE_BYTECODE: 1
  UV_LINK_MODE: copy
  PYTHONOPTIMIZE: 1
  CONFIG_VALIDATION_TIMEOUT: 120
  DEPLOYMENT_TIMEOUT: 600

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false  # Don't cancel config deployments to prevent partial states

jobs:
  detect-config-changes:
    name: Detect Configuration Changes
    runs-on: ubuntu-latest
    outputs:
      profiles-changed: ${{ steps.detect-changes.outputs.profiles-changed }}
      templates-changed: ${{ steps.detect-changes.outputs.templates-changed }}
      monitoring-changed: ${{ steps.detect-changes.outputs.monitoring-changed }}
      security-changed: ${{ steps.detect-changes.outputs.security-changed }}
      infrastructure-changed: ${{ steps.detect-changes.outputs.infrastructure-changed }}
      should-deploy: ${{ steps.detect-changes.outputs.should-deploy }}
      target-environment: ${{ steps.detect-changes.outputs.target-environment }}
      deployment-strategy: ${{ steps.detect-changes.outputs.deployment-strategy }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect configuration changes
        id: detect-changes
        uses: ./.github/actions/detect-changes
        with:
          github-event-name: ${{ github.event_name }}
          github-ref: ${{ github.ref }}
          workflow-dispatch-environment: ${{ inputs.environment }}

  validate-configuration:
    name: Validate Configuration
    runs-on: ubuntu-latest
    needs: detect-config-changes
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate configuration
        uses: ./.github/actions/validate-config
        with:
          target-environment: ${{ needs.detect-config-changes.outputs.target-environment }}

  test-configuration:
    name: Test Configuration
    runs-on: ubuntu-latest
    needs: [detect-config-changes, validate-configuration]
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Test configuration loading
        run: |
          echo "üß™ Testing configuration loading..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          uv run python -c "
          import sys
          import os
          sys.path.append('src')
          
          # Set environment for testing
          os.environ['ENVIRONMENT'] = '${TARGET_ENV}'
          os.environ['CONFIG_PATH'] = 'config/templates/${TARGET_ENV}.json'
          
          try:
            from config.core import load_config
            config = load_config()
            print(f'‚úÖ Configuration loaded successfully for {TARGET_ENV}')
            print(f'Environment: {config.get(\"environment\", \"unknown\")}')
            print(f'Debug mode: {config.get(\"debug\", \"unknown\")}')
          except Exception as e:
            print(f'‚ùå Configuration loading failed: {e}')
            sys.exit(1)
          "

      - name: Test service connectivity
        run: |
          echo "üîó Testing service connectivity..."
          
          # Test Redis connection
          timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
          echo "‚úÖ Redis connectivity test passed"
          
          # Test configuration-based service initialization
          uv run python -c "
          import sys
          sys.path.append('src')
          
          try:
            from services.cache.manager import CacheManager
            # Test with local Redis
            import os
            os.environ['REDIS_URL'] = 'redis://localhost:6379'
            
            cache_manager = CacheManager()
            print('‚úÖ Cache manager initialization successful')
          except Exception as e:
            print(f'‚ö†Ô∏è Service initialization test failed: {e}')
            # Non-blocking for configuration tests
          "

      - name: Test monitoring configuration
        run: |
          echo "üìä Testing monitoring configuration..."
          
          if [ -f "config/prometheus/prometheus.yml" ]; then
            # Validate Prometheus config syntax
            docker run --rm -v $(pwd)/config/prometheus:/etc/prometheus prom/prometheus:latest \
              promtool check config /etc/prometheus/prometheus.yml
            echo "‚úÖ Prometheus configuration is valid"
          fi
          
          if [ -f "config/grafana/dashboards/application-overview.json" ]; then
            uv run python -c "
            import json
            with open('config/grafana/dashboards/application-overview.json') as f:
              dashboard = json.load(f)
            print('‚úÖ Grafana dashboard configuration is valid')
            "
          fi

  deploy-configuration:
    name: Deploy Configuration
    runs-on: ubuntu-latest
    needs: [detect-config-changes, validate-configuration, test-configuration]
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    environment: 
      name: ${{ needs.detect-config-changes.outputs.target-environment }}
      url: ${{ steps.deploy.outputs.deployment-url }}
    outputs:
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
      snapshot-id: ${{ steps.deploy.outputs.snapshot-id }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Deploy configuration
        id: deploy
        uses: ./.github/actions/deploy-config
        with:
          target-environment: ${{ needs.detect-config-changes.outputs.target-environment }}
          deployment-strategy: ${{ needs.detect-config-changes.outputs.deployment-strategy }}
          rollback-on-failure: ${{ inputs.rollback_on_failure }}

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [detect-config-changes, deploy-configuration]
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run smoke tests
        uses: ./.github/actions/smoke-tests
        with:
          target-environment: ${{ needs.detect-config-changes.outputs.target-environment }}
          deployment-url: ${{ needs.deploy-configuration.outputs.deployment-url }}

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [detect-config-changes, deploy-configuration, smoke-tests]
    if: always() && needs.detect-config-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: Post deployment status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentResult = '${{ needs.deploy-configuration.result }}';
            const smokeTestResult = '${{ needs.smoke-tests.result }}';
            const targetEnv = '${{ needs.detect-config-changes.outputs.target-environment }}';
            const strategy = '${{ needs.detect-config-changes.outputs.deployment-strategy }}';
            
            let status = 'üöÄ';
            let message = `## Configuration Deployment Results\n\n`;
            message += `**Environment:** ${targetEnv}\n`;
            message += `**Strategy:** ${strategy}\n`;
            message += `**Commit:** ${context.sha.substring(0, 7)}\n\n`;
            
            message += `### Results\n`;
            message += `${deploymentResult === 'success' ? '‚úÖ' : '‚ùå'} **Deployment:** ${deploymentResult}\n`;
            message += `${smokeTestResult === 'success' ? '‚úÖ' : '‚ùå'} **Smoke Tests:** ${smokeTestResult}\n\n`;
            
            if (deploymentResult === 'success' && smokeTestResult === 'success') {
              message += `üéâ **Status:** Configuration successfully deployed to ${targetEnv}!`;
              status = '‚úÖ';
            } else {
              message += `‚ö†Ô∏è **Status:** Configuration deployment issues detected. Please review the logs.`;
              status = '‚ùå';
            }
            
            const changedProfiles = '${{ needs.detect-config-changes.outputs.profiles-changed }}' === 'true';
            const changedMonitoring = '${{ needs.detect-config-changes.outputs.monitoring-changed }}' === 'true';
            const changedSecurity = '${{ needs.detect-config-changes.outputs.security-changed }}' === 'true';
            
            if (changedProfiles || changedMonitoring || changedSecurity) {
              message += `\n\n### Changed Components\n`;
              if (changedProfiles) message += `- üîß Configuration profiles\n`;
              if (changedMonitoring) message += `- üìä Monitoring configuration\n`;
              if (changedSecurity) message += `- üîí Security configuration\n`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status} ${message}`
            });

      - name: Generate deployment report
        run: |
          echo "üìä Generating deployment report..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          cat > deployment-report.md << EOF
          # Configuration Deployment Report
          
          **Date:** $(date)
          **Environment:** $TARGET_ENV
          **Commit:** ${{ github.sha }}
          **Strategy:** ${{ needs.detect-config-changes.outputs.deployment-strategy }}
          
          ## Summary
          - **Validation:** ${{ needs.validate-configuration.result }}
          - **Testing:** ${{ needs.test-configuration.result }}
          - **Deployment:** ${{ needs.deploy-configuration.result }}
          - **Smoke Tests:** ${{ needs.smoke-tests.result }}
          
          ## Changed Components
          - Profiles: ${{ needs.detect-config-changes.outputs.profiles-changed }}
          - Templates: ${{ needs.detect-config-changes.outputs.templates-changed }}
          - Monitoring: ${{ needs.detect-config-changes.outputs.monitoring-changed }}
          - Security: ${{ needs.detect-config-changes.outputs.security-changed }}
          - Infrastructure: ${{ needs.detect-config-changes.outputs.infrastructure-changed }}
          
          ## Next Steps
          - Monitor application metrics for any anomalies
          - Verify all services are using the new configuration
          - Update documentation if configuration schema changed
          EOF
          
          echo "‚úÖ Deployment report generated"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: config-deployment-${{ needs.detect-config-changes.outputs.target-environment }}-${{ github.sha }}
          path: |
            deployment-report.md
            .deployment-snapshots/
          retention-days: 30
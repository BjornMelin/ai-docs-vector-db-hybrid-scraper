name: Configuration Deployment Automation

on:
  push:
    branches: [main, develop]
    paths:
      - 'config/**'
      - '.github/workflows/config-deployment.yml'
      - 'src/config/**'
      - 'pyproject.toml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'config/**'
      - '.github/workflows/config-deployment.yml'
      - 'src/config/**'
      - 'pyproject.toml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      config_profile:
        description: 'Configuration profile to deploy'
        required: false
        default: 'auto-detect'
        type: string
      rollback_on_failure:
        description: 'Automatically rollback on deployment failure'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  pull-requests: write
  issues: write
  deployments: write
  checks: write

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  UV_SYSTEM_PYTHON: 1
  UV_CACHE_COMPRESSION: 1
  UV_COMPILE_BYTECODE: 1
  UV_LINK_MODE: copy
  PYTHONOPTIMIZE: 1
  CONFIG_VALIDATION_TIMEOUT: 120
  DEPLOYMENT_TIMEOUT: 600

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'auto' }}
  cancel-in-progress: false  # Don't cancel config deployments to prevent partial states

jobs:
  detect-config-changes:
    name: Detect Configuration Changes
    runs-on: ubuntu-latest
    outputs:
      profiles-changed: ${{ steps.changes.outputs.profiles }}
      templates-changed: ${{ steps.changes.outputs.templates }}
      monitoring-changed: ${{ steps.changes.outputs.monitoring }}
      security-changed: ${{ steps.changes.outputs.security }}
      infrastructure-changed: ${{ steps.changes.outputs.infrastructure }}
      should-deploy: ${{ steps.should-deploy.outputs.result }}
      target-environment: ${{ steps.environment.outputs.target }}
      deployment-strategy: ${{ steps.strategy.outputs.strategy }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect configuration changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            profiles:
              - 'config/templates/**'
              - 'config/profiles/**'
            templates:
              - 'config/templates/**'
            monitoring:
              - 'config/prometheus/**'
              - 'config/grafana/**'
              - 'config/alertmanager/**'
            security:
              - 'src/security/**'
              - 'config/**/*.json'
              - 'config/**/*.yml'
            infrastructure:
              - 'docker-compose*.yml'
              - 'config/profiles/**'

      - name: Determine target environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "target=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "target=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "target=staging" >> $GITHUB_OUTPUT
          else
            echo "target=development" >> $GITHUB_OUTPUT
          fi

      - name: Determine deployment strategy
        id: strategy
        run: |
          TARGET_ENV="${{ steps.environment.outputs.target }}"
          if [ "$TARGET_ENV" == "production" ]; then
            echo "strategy=blue-green" >> $GITHUB_OUTPUT
          elif [ "$TARGET_ENV" == "staging" ]; then
            echo "strategy=rolling" >> $GITHUB_OUTPUT
          else
            echo "strategy=direct" >> $GITHUB_OUTPUT
          fi

      - name: Should deploy decision
        id: should-deploy
        run: |
          if [ "${{ steps.changes.outputs.profiles }}" == "true" ] || \
             [ "${{ steps.changes.outputs.templates }}" == "true" ] || \
             [ "${{ steps.changes.outputs.monitoring }}" == "true" ] || \
             [ "${{ steps.changes.outputs.security }}" == "true" ] || \
             [ "${{ steps.changes.outputs.infrastructure }}" == "true" ] || \
             [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "result=true" >> $GITHUB_OUTPUT
          else
            echo "result=false" >> $GITHUB_OUTPUT
          fi

  validate-configuration:
    name: Validate Configuration
    runs-on: ubuntu-latest
    needs: detect-config-changes
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Cache configuration validation
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
            config/.validation_cache
          key: config-validation-${{ runner.os }}-${{ hashFiles('config/**', 'src/config/**', 'pyproject.toml') }}
          restore-keys: |
            config-validation-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Validate JSON configuration files
        run: |
          echo "üîç Validating JSON configuration files..."
          find config -name "*.json" -type f | while read -r file; do
            echo "Validating: $file"
            if ! uv run python -m json.tool "$file" > /dev/null; then
              echo "‚ùå Invalid JSON: $file"
              exit 1
            else
              echo "‚úÖ Valid JSON: $file"
            fi
          done

      - name: Validate YAML configuration files
        run: |
          echo "üîç Validating YAML configuration files..."
          uv run python -c "
          import yaml
          import sys
          from pathlib import Path
          
          yaml_files = list(Path('config').rglob('*.yml')) + list(Path('config').rglob('*.yaml'))
          errors = []
          
          for file in yaml_files:
            try:
              with open(file, 'r') as f:
                yaml.safe_load(f)
              print(f'‚úÖ Valid YAML: {file}')
            except yaml.YAMLError as e:
              error_msg = f'‚ùå Invalid YAML: {file} - {e}'
              print(error_msg)
              errors.append(error_msg)
          
          if errors:
            print(f'\\n‚ùå {len(errors)} YAML validation errors found')
            sys.exit(1)
          else:
            print(f'\\n‚úÖ All {len(yaml_files)} YAML files are valid')
          "

      - name: Validate configuration schema
        run: |
          echo "üîç Validating configuration schema..."
          if [ -f "src/config/validators.py" ]; then
            uv run python -c "
            import sys
            sys.path.append('src')
            from config.validators import validate_all_configs
            try:
              validate_all_configs('config/')
              print('‚úÖ All configuration schemas are valid')
            except Exception as e:
              print(f'‚ùå Configuration validation failed: {e}')
              sys.exit(1)
            "
          else
            echo "‚ö†Ô∏è No schema validator found, skipping schema validation"
          fi

      - name: Test configuration templates
        run: |
          echo "üîç Testing configuration template rendering..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          # Test template rendering for target environment
          if [ -f "config/templates/${TARGET_ENV}.json" ]; then
            echo "Testing template: config/templates/${TARGET_ENV}.json"
            uv run python -c "
            import json
            import sys
            
            try:
              with open('config/templates/${TARGET_ENV}.json', 'r') as f:
                config = json.load(f)
              
              # Basic template validation
              required_sections = ['environment', 'cache', 'qdrant', 'performance']
              missing = [s for s in required_sections if s not in config]
              
              if missing:
                print(f'‚ùå Missing required sections: {missing}')
                sys.exit(1)
              
              print('‚úÖ Configuration template is valid')
            except Exception as e:
              print(f'‚ùå Template validation failed: {e}')
              sys.exit(1)
            "
          else
            echo "‚ö†Ô∏è No template found for environment: ${TARGET_ENV}"
          fi

      - name: Validate Docker Compose configuration
        run: |
          echo "üîç Validating Docker Compose configuration..."
          
          # Validate main docker-compose.yml
          if [ -f "docker-compose.yml" ]; then
            docker compose -f docker-compose.yml config --quiet
            echo "‚úÖ docker-compose.yml is valid"
          fi
          
          # Validate environment-specific overrides
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          OVERRIDE_FILE="docker-compose.${TARGET_ENV}.yml"
          
          if [ -f "$OVERRIDE_FILE" ]; then
            docker compose -f docker-compose.yml -f "$OVERRIDE_FILE" config --quiet
            echo "‚úÖ $OVERRIDE_FILE is valid"
          else
            echo "‚ÑπÔ∏è No override file found: $OVERRIDE_FILE"
          fi

      - name: Security configuration scan
        run: |
          echo "üîí Scanning configuration for security issues..."
          
          # Check for exposed secrets or keys
          if grep -r -i "password\|secret\|key" config/ --include="*.json" --include="*.yml" | grep -v "_template_placeholder_" | grep -v "example"; then
            echo "‚ö†Ô∏è Potential secrets found in configuration files"
            echo "Please ensure all secrets are properly externalized"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
          
          # Check for insecure defaults
          if grep -r "debug.*true\|DEBUG.*true" config/ --include="*.json"; then
            echo "‚ö†Ô∏è Debug mode enabled in configuration"
          fi

  test-configuration:
    name: Test Configuration
    runs-on: ubuntu-latest
    needs: [detect-config-changes, validate-configuration]
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Test configuration loading
        run: |
          echo "üß™ Testing configuration loading..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          uv run python -c "
          import sys
          import os
          sys.path.append('src')
          
          # Set environment for testing
          os.environ['ENVIRONMENT'] = '${TARGET_ENV}'
          os.environ['CONFIG_PATH'] = 'config/templates/${TARGET_ENV}.json'
          
          try:
            from config.core import load_config
            config = load_config()
            print(f'‚úÖ Configuration loaded successfully for {TARGET_ENV}')
            print(f'Environment: {config.get(\"environment\", \"unknown\")}')
            print(f'Debug mode: {config.get(\"debug\", \"unknown\")}')
          except Exception as e:
            print(f'‚ùå Configuration loading failed: {e}')
            sys.exit(1)
          "

      - name: Test service connectivity
        run: |
          echo "üîó Testing service connectivity..."
          
          # Test Redis connection
          timeout 30 bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
          echo "‚úÖ Redis connectivity test passed"
          
          # Test configuration-based service initialization
          uv run python -c "
          import sys
          sys.path.append('src')
          
          try:
            from services.cache.manager import CacheManager
            # Test with local Redis
            import os
            os.environ['REDIS_URL'] = 'redis://localhost:6379'
            
            cache_manager = CacheManager()
            print('‚úÖ Cache manager initialization successful')
          except Exception as e:
            print(f'‚ö†Ô∏è Service initialization test failed: {e}')
            # Non-blocking for configuration tests
          "

      - name: Test monitoring configuration
        run: |
          echo "üìä Testing monitoring configuration..."
          
          if [ -f "config/prometheus/prometheus.yml" ]; then
            # Validate Prometheus config syntax
            docker run --rm -v $(pwd)/config/prometheus:/etc/prometheus prom/prometheus:latest \
              promtool check config /etc/prometheus/prometheus.yml
            echo "‚úÖ Prometheus configuration is valid"
          fi
          
          if [ -f "config/grafana/dashboards/application-overview.json" ]; then
            uv run python -c "
            import json
            with open('config/grafana/dashboards/application-overview.json') as f:
              dashboard = json.load(f)
            print('‚úÖ Grafana dashboard configuration is valid')
            "
          fi

  deploy-configuration:
    name: Deploy Configuration
    runs-on: ubuntu-latest
    needs: [detect-config-changes, validate-configuration, test-configuration]
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    environment: 
      name: ${{ needs.detect-config-changes.outputs.target-environment }}
      url: ${{ steps.deployment.outputs.url }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Create deployment snapshot
        id: snapshot
        run: |
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          SNAPSHOT_ID="${TARGET_ENV}-${TIMESTAMP}-${{ github.sha }}"
          
          echo "Creating deployment snapshot: $SNAPSHOT_ID"
          
          # Create snapshot directory
          mkdir -p .deployment-snapshots
          
          # Save current configuration state
          tar -czf ".deployment-snapshots/${SNAPSHOT_ID}.tar.gz" config/
          
          # Save deployment metadata
          cat > ".deployment-snapshots/${SNAPSHOT_ID}.json" << EOF
          {
            "snapshot_id": "$SNAPSHOT_ID",
            "environment": "$TARGET_ENV",
            "timestamp": "$TIMESTAMP",
            "commit_sha": "${{ github.sha }}",
            "commit_message": "${{ github.event.head_commit.message }}",
            "author": "${{ github.event.head_commit.author.name }}",
            "deployment_strategy": "${{ needs.detect-config-changes.outputs.deployment-strategy }}",
            "changed_files": [
              $(git diff --name-only HEAD~1 HEAD | grep -E '^config/' | jq -R . | paste -sd,)
            ]
          }
          EOF
          
          echo "snapshot-id=$SNAPSHOT_ID" >> $GITHUB_OUTPUT

      - name: Pre-deployment backup
        run: |
          echo "üíæ Creating pre-deployment backup..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          # This would typically backup from the actual deployment target
          # For now, we'll simulate by copying current production template
          if [ "$TARGET_ENV" == "production" ] && [ -f "config/templates/production.json" ]; then
            cp "config/templates/production.json" "config/templates/production.backup-$(date +%Y%m%d-%H%M%S).json"
            echo "‚úÖ Backup created for production configuration"
          fi

      - name: Deploy configuration
        id: deployment
        run: |
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          STRATEGY="${{ needs.detect-config-changes.outputs.deployment-strategy }}"
          SNAPSHOT_ID="${{ steps.snapshot.outputs.snapshot-id }}"
          
          echo "üöÄ Deploying configuration..."
          echo "Environment: $TARGET_ENV"
          echo "Strategy: $STRATEGY"
          echo "Snapshot: $SNAPSHOT_ID"
          
          # In a real deployment, this would:
          # 1. Update configuration management systems (e.g., Consul, etcd)
          # 2. Restart services with new configuration
          # 3. Verify deployment health
          
          # For this demo, we'll simulate deployment steps
          echo "üìã Deployment steps for $STRATEGY strategy:"
          
          case $STRATEGY in
            "blue-green")
              echo "  1. Deploy to blue environment"
              echo "  2. Validate blue environment health"
              echo "  3. Switch traffic to blue"
              echo "  4. Decommission green environment"
              ;;
            "rolling")
              echo "  1. Update instances in rolling fashion"
              echo "  2. Validate each instance after update"
              echo "  3. Continue until all instances updated"
              ;;
            "direct")
              echo "  1. Direct deployment to development environment"
              echo "  2. Immediate validation"
              ;;
          esac
          
          # Simulate deployment time
          sleep 10
          
          # Set deployment URL (would be actual service URL in real deployment)
          echo "url=https://${TARGET_ENV}.your-app.com/health" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Configuration deployment completed"

      - name: Post-deployment validation
        run: |
          echo "‚úÖ Running post-deployment validation..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          # Validate the deployed configuration
          uv run python -c "
          import sys
          import os
          sys.path.append('src')
          
          # Simulate loading deployed configuration
          os.environ['ENVIRONMENT'] = '${TARGET_ENV}'
          os.environ['CONFIG_PATH'] = 'config/templates/${TARGET_ENV}.json'
          
          try:
            from config.core import load_config
            config = load_config()
            
            # Validate critical configuration sections
            assert config.get('environment') == '${TARGET_ENV}', 'Environment mismatch'
            assert 'cache' in config, 'Cache configuration missing'
            assert 'qdrant' in config, 'Qdrant configuration missing'
            
            print('‚úÖ Post-deployment configuration validation passed')
          except Exception as e:
            print(f'‚ùå Post-deployment validation failed: {e}')
            sys.exit(1)
          "

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üìù Deployment successful - updating status"
            # In real implementation, update deployment tracking system
          else
            echo "‚ùå Deployment failed - initiating rollback procedures"
            # Trigger rollback if enabled
            if [ "${{ inputs.rollback_on_failure }}" == "true" ]; then
              echo "üîÑ Automatic rollback enabled - starting rollback"
              # Implement rollback logic here
            fi
          fi

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [detect-config-changes, deploy-configuration]
    if: needs.detect-config-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run configuration smoke tests
        run: |
          echo "üí® Running configuration smoke tests..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          # Test configuration loading and basic functionality
          uv run python -c "
          import sys
          import os
          sys.path.append('src')
          
          os.environ['ENVIRONMENT'] = '${TARGET_ENV}'
          os.environ['CONFIG_PATH'] = 'config/templates/${TARGET_ENV}.json'
          
          try:
            from config.core import load_config
            config = load_config()
            
            # Smoke test: Check all required configuration sections exist
            required_sections = [
              'environment', 'debug', 'log_level', 'embedding_provider',
              'crawl_provider', 'cache', 'qdrant', 'performance', 'security'
            ]
            
            missing_sections = [s for s in required_sections if s not in config]
            if missing_sections:
              print(f'‚ùå Missing configuration sections: {missing_sections}')
              sys.exit(1)
            
            # Smoke test: Validate critical values
            assert config['environment'] == '${TARGET_ENV}', f'Environment mismatch: expected ${TARGET_ENV}, got {config[\"environment\"]}'
            assert isinstance(config['cache']['ttl_embeddings'], int), 'Cache TTL must be integer'
            assert config['qdrant']['batch_size'] > 0, 'Qdrant batch size must be positive'
            
            print('‚úÖ Configuration smoke tests passed')
            print(f'   Environment: {config[\"environment\"]}')
            print(f'   Debug mode: {config[\"debug\"]}')
            print(f'   Log level: {config[\"log_level\"]}')
            print(f'   Cache enabled: {config[\"cache\"][\"enable_caching\"]}')
            print(f'   Qdrant URL: {config[\"qdrant\"][\"url\"]}')
            
          except Exception as e:
            print(f'‚ùå Configuration smoke tests failed: {e}')
            sys.exit(1)
          "

      - name: Test service health endpoints
        run: |
          echo "üè• Testing service health endpoints..."
          
          # In real deployment, test actual service endpoints
          # For now, simulate health checks
          DEPLOYMENT_URL="${{ needs.deploy-configuration.outputs.url }}"
          
          echo "Simulating health check for: $DEPLOYMENT_URL"
          echo "‚úÖ Health check passed (simulated)"

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [detect-config-changes, deploy-configuration, smoke-tests]
    if: always() && needs.detect-config-changes.outputs.should-deploy == 'true'
    
    steps:
      - name: Post deployment status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentResult = '${{ needs.deploy-configuration.result }}';
            const smokeTestResult = '${{ needs.smoke-tests.result }}';
            const targetEnv = '${{ needs.detect-config-changes.outputs.target-environment }}';
            const strategy = '${{ needs.detect-config-changes.outputs.deployment-strategy }}';
            
            let status = 'üöÄ';
            let message = `## Configuration Deployment Results\n\n`;
            message += `**Environment:** ${targetEnv}\n`;
            message += `**Strategy:** ${strategy}\n`;
            message += `**Commit:** ${context.sha.substring(0, 7)}\n\n`;
            
            message += `### Results\n`;
            message += `${deploymentResult === 'success' ? '‚úÖ' : '‚ùå'} **Deployment:** ${deploymentResult}\n`;
            message += `${smokeTestResult === 'success' ? '‚úÖ' : '‚ùå'} **Smoke Tests:** ${smokeTestResult}\n\n`;
            
            if (deploymentResult === 'success' && smokeTestResult === 'success') {
              message += `üéâ **Status:** Configuration successfully deployed to ${targetEnv}!`;
              status = '‚úÖ';
            } else {
              message += `‚ö†Ô∏è **Status:** Configuration deployment issues detected. Please review the logs.`;
              status = '‚ùå';
            }
            
            const changedProfiles = '${{ needs.detect-config-changes.outputs.profiles-changed }}' === 'true';
            const changedMonitoring = '${{ needs.detect-config-changes.outputs.monitoring-changed }}' === 'true';
            const changedSecurity = '${{ needs.detect-config-changes.outputs.security-changed }}' === 'true';
            
            if (changedProfiles || changedMonitoring || changedSecurity) {
              message += `\n\n### Changed Components\n`;
              if (changedProfiles) message += `- üîß Configuration profiles\n`;
              if (changedMonitoring) message += `- üìä Monitoring configuration\n`;
              if (changedSecurity) message += `- üîí Security configuration\n`;
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${status} ${message}`
            });

      - name: Generate deployment report
        run: |
          echo "üìä Generating deployment report..."
          TARGET_ENV="${{ needs.detect-config-changes.outputs.target-environment }}"
          
          cat > deployment-report.md << EOF
          # Configuration Deployment Report
          
          **Date:** $(date)
          **Environment:** $TARGET_ENV
          **Commit:** ${{ github.sha }}
          **Strategy:** ${{ needs.detect-config-changes.outputs.deployment-strategy }}
          
          ## Summary
          - **Validation:** ${{ needs.validate-configuration.result }}
          - **Testing:** ${{ needs.test-configuration.result }}
          - **Deployment:** ${{ needs.deploy-configuration.result }}
          - **Smoke Tests:** ${{ needs.smoke-tests.result }}
          
          ## Changed Components
          - Profiles: ${{ needs.detect-config-changes.outputs.profiles-changed }}
          - Templates: ${{ needs.detect-config-changes.outputs.templates-changed }}
          - Monitoring: ${{ needs.detect-config-changes.outputs.monitoring-changed }}
          - Security: ${{ needs.detect-config-changes.outputs.security-changed }}
          - Infrastructure: ${{ needs.detect-config-changes.outputs.infrastructure-changed }}
          
          ## Next Steps
          - Monitor application metrics for any anomalies
          - Verify all services are using the new configuration
          - Update documentation if configuration schema changed
          EOF
          
          echo "‚úÖ Deployment report generated"

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: config-deployment-${{ needs.detect-config-changes.outputs.target-environment }}-${{ github.sha }}
          path: |
            deployment-report.md
            .deployment-snapshots/
          retention-days: 30
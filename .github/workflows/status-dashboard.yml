name: Status Dashboard

on:
  schedule:
    # Update status every 6 hours
    - cron: '0 */6 * * *'
  workflow_run:
    workflows: ["Continuous Integration", "Security Pipeline", "Documentation Pipeline"]
    types: [completed]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  update-dashboard:
    name: Update Status Dashboard
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get workflow statuses
        id: workflows
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = ['Continuous Integration', 'Security Pipeline', 'Documentation Pipeline'];
            const statuses = {};
            
            for (const workflow of workflows) {
              try {
                const { data: runs } = await github.rest.actions.listWorkflowRuns({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: workflow.toLowerCase().replace(/ /g, '-') + '.yml',
                  per_page: 1,
                  branch: 'main'
                });
                
                if (runs.workflow_runs.length > 0) {
                  const run = runs.workflow_runs[0];
                  statuses[workflow] = {
                    status: run.conclusion || run.status,
                    url: run.html_url,
                    created_at: run.created_at
                  };
                } else {
                  statuses[workflow] = {
                    status: 'no_runs',
                    url: '#',
                    created_at: new Date().toISOString()
                  };
                }
              } catch (error) {
                console.log(`Error fetching workflow ${workflow}: ${error.message}`);
                statuses[workflow] = {
                  status: 'error',
                  url: '#',
                  created_at: new Date().toISOString()
                };
              }
            }
            
            return statuses;

      - name: Generate status badges
        run: |
          mkdir -p .github/badges
          
          # Function to get badge color
          get_badge_color() {
            case $1 in
              "success") echo "brightgreen" ;;
              "failure") echo "red" ;;
              "cancelled") echo "yellow" ;;
              "in_progress") echo "blue" ;;
              "queued") echo "lightgrey" ;;
              *) echo "lightgrey" ;;
            esac
          }
          
          # Function to get status text
          get_status_text() {
            case $1 in
              "success") echo "passing" ;;
              "failure") echo "failing" ;;
              "cancelled") echo "cancelled" ;;
              "in_progress") echo "running" ;;
              "queued") echo "queued" ;;
              "no_runs") echo "no runs" ;;
              *) echo "unknown" ;;
            esac
          }
          
          # Create badge URLs (using shields.io)
          CI_STATUS="${{ fromJson(steps.workflows.outputs.result)['Continuous Integration'].status }}"
          SEC_STATUS="${{ fromJson(steps.workflows.outputs.result)['Security Pipeline'].status }}"
          DOC_STATUS="${{ fromJson(steps.workflows.outputs.result)['Documentation Pipeline'].status }}"
          
          CI_COLOR=$(get_badge_color "$CI_STATUS")
          SEC_COLOR=$(get_badge_color "$SEC_STATUS")
          DOC_COLOR=$(get_badge_color "$DOC_STATUS")
          
          CI_TEXT=$(get_status_text "$CI_STATUS")
          SEC_TEXT=$(get_status_text "$SEC_STATUS")
          DOC_TEXT=$(get_status_text "$DOC_STATUS")
          
          echo "[![CI](https://img.shields.io/badge/CI-${CI_TEXT}-${CI_COLOR})](${{ fromJson(steps.workflows.outputs.result)['Continuous Integration'].url }})" > .github/badges/ci.md
          echo "[![Security](https://img.shields.io/badge/Security-${SEC_TEXT}-${SEC_COLOR})](${{ fromJson(steps.workflows.outputs.result)['Security Pipeline'].url }})" > .github/badges/security.md
          echo "[![Docs](https://img.shields.io/badge/Docs-${DOC_TEXT}-${DOC_COLOR})](${{ fromJson(steps.workflows.outputs.result)['Documentation Pipeline'].url }})" > .github/badges/docs.md

      - name: Update status dashboard file
        run: |
          cat > .github/STATUS.md << 'EOF'
          # 🚦 Project Status Dashboard
          
          Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## CI/CD Pipeline Status
          
          | Pipeline | Status | Last Run |
          |----------|--------|----------|
          | Continuous Integration | [![CI](https://img.shields.io/badge/CI-${{ fromJson(steps.workflows.outputs.result)['Continuous Integration'].status }}-$(case "${{ fromJson(steps.workflows.outputs.result)['Continuous Integration'].status }}" in "success") echo "brightgreen" ;; "failure") echo "red" ;; *) echo "lightgrey" ;; esac))](${{ fromJson(steps.workflows.outputs.result)['Continuous Integration'].url }}) | ${{ fromJson(steps.workflows.outputs.result)['Continuous Integration'].created_at }} |
          | Security Pipeline | [![Security](https://img.shields.io/badge/Security-${{ fromJson(steps.workflows.outputs.result)['Security Pipeline'].status }}-$(case "${{ fromJson(steps.workflows.outputs.result)['Security Pipeline'].status }}" in "success") echo "brightgreen" ;; "failure") echo "red" ;; *) echo "lightgrey" ;; esac))](${{ fromJson(steps.workflows.outputs.result)['Security Pipeline'].url }}) | ${{ fromJson(steps.workflows.outputs.result)['Security Pipeline'].created_at }} |
          | Documentation Pipeline | [![Docs](https://img.shields.io/badge/Docs-${{ fromJson(steps.workflows.outputs.result)['Documentation Pipeline'].status }}-$(case "${{ fromJson(steps.workflows.outputs.result)['Documentation Pipeline'].status }}" in "success") echo "brightgreen" ;; "failure") echo "red" ;; *) echo "lightgrey" ;; esac))](${{ fromJson(steps.workflows.outputs.result)['Documentation Pipeline'].url }}) | ${{ fromJson(steps.workflows.outputs.result)['Documentation Pipeline'].created_at }} |
          
          ## Quick Links
          
          - 🔍 [All Workflow Runs](https://github.com/${{ github.repository }}/actions)
          - 📊 [Security Dashboard](https://github.com/${{ github.repository }}/security)
          - 📋 [Open Issues](https://github.com/${{ github.repository }}/issues)
          - 🔀 [Open Pull Requests](https://github.com/${{ github.repository }}/pulls)
          
          ## Repository Health
          
          - **Total Issues**: $(curl -s "https://api.github.com/repos/${{ github.repository }}" | jq -r '.open_issues_count // "N/A"')
          - **Default Branch**: $(curl -s "https://api.github.com/repos/${{ github.repository }}" | jq -r '.default_branch // "main"')
          - **Last Activity**: $(curl -s "https://api.github.com/repos/${{ github.repository }}" | jq -r '.updated_at // "N/A"')
          
          ---
          
          *This dashboard is automatically updated by GitHub Actions*
          EOF

      - name: Commit status updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            git add .github/STATUS.md .github/badges/
            git commit -m "docs: update status dashboard [skip ci]"
            git push
          else
            echo "No changes to commit"
          fi

  generate-coverage-badge:
    name: Generate Coverage Badge
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run' && github.event.workflow_run.name == 'Continuous Integration'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download coverage artifact
        uses: actions/download-artifact@v5
        with:
          name: coverage-reports
          path: coverage/
        continue-on-error: true

      - name: Generate coverage badge
        run: |
          if [ -f "coverage/coverage.xml" ]; then
            # Extract coverage percentage from coverage.xml
            COVERAGE=$(python3 -c "
            import xml.etree.ElementTree as ET
            try:
                tree = ET.parse('coverage/coverage.xml')
                root = tree.getroot()
                coverage = float(root.attrib['line-rate']) * 100
                print(f'{coverage:.0f}')
            except:
                print('unknown')
            ")
            
            # Determine badge color
            if [ "$COVERAGE" = "unknown" ]; then
              COLOR="lightgrey"
            elif [ "$COVERAGE" -ge 90 ]; then
              COLOR="brightgreen"
            elif [ "$COVERAGE" -ge 80 ]; then
              COLOR="green"
            elif [ "$COVERAGE" -ge 70 ]; then
              COLOR="yellow"
            elif [ "$COVERAGE" -ge 60 ]; then
              COLOR="orange"
            else
              COLOR="red"
            fi
            
            echo "Coverage: ${COVERAGE}% (Color: ${COLOR})"
            
            # Create coverage badge markdown
            mkdir -p .github/badges
            echo "[![Coverage](https://img.shields.io/badge/Coverage-${COVERAGE}%25-${COLOR})](https://github.com/${{ github.repository }}/actions)" > .github/badges/coverage.md
            
            # Commit the badge
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            if [[ -n $(git status --porcelain) ]]; then
              git add .github/badges/coverage.md
              git commit -m "docs: update coverage badge to ${COVERAGE}% [skip ci]"
              git push
            fi
          else
            echo "No coverage report found"
          fi
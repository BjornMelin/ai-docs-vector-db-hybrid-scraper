name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.release_type == 'prerelease' }}"
          else
            VERSION="${{ github.ref_name }}"
            # Check if it's a prerelease (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9-]+)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "✅ Version format is valid: $VERSION"

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "❌ Tag $VERSION already exists"
            exit 1
          fi
          echo "✅ Tag $VERSION does not exist yet"

  run-tests:
    name: Run Full Test Suite
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run linting
        run: |
          uv run ruff check .
          uv run ruff format --check .

      - name: Run full test suite
        run: |
          uv run pytest --cov=src --cov-report=xml --cov-report=html --tb=short

      - name: Check coverage threshold
        run: |
          uv run coverage report --fail-under=80

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    outputs:
      artifact-paths: ${{ steps.build.outputs.artifact-paths }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Update version in pyproject.toml
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix for Python version
          PYTHON_VERSION="${VERSION#v}"
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$PYTHON_VERSION\"/" pyproject.toml
          
          echo "Updated version to: $PYTHON_VERSION"
          grep "version =" pyproject.toml

      - name: Build package
        id: build
        run: |
          uv build
          
          # List built artifacts
          echo "Built artifacts:"
          ls -la dist/
          
          # Set output for artifact paths
          ARTIFACTS=$(ls dist/ | tr '\n' ' ')
          echo "artifact-paths=$ARTIFACTS" >> $GITHUB_OUTPUT

      - name: Verify package
        run: |
          uv tool install twine
          uv tool run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
          retention-days: 30

  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]
    if: hashFiles('Dockerfile*') != ''
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.worker
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom
          path: sbom.spdx.json
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run security scans
        run: |
          # Install security tools
          uv tool install safety
          uv tool install pip-audit
          uv tool install bandit
          
          # Run security checks
          echo "## Security Scan Results" > security-report.md
          echo "" >> security-report.md
          
          echo "### Dependency Vulnerabilities" >> security-report.md
          uv tool run pip-audit --format=markdown >> security-report.md || echo "No vulnerabilities found" >> security-report.md
          
          echo "" >> security-report.md
          echo "### Code Security Issues" >> security-report.md
          uv tool run bandit -r src/ -f txt >> security-report.md || echo "No issues found" >> security-report.md

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          echo "# Changelog for $VERSION" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            
            # Generate commit log
            git log --pretty=format:"- %s (%h)" "$PREVIOUS_TAG"..HEAD >> CHANGELOG.md
            
            echo "" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## Full Changelog" >> CHANGELOG.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION" >> CHANGELOG.md
          else
            echo "## Initial Release" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "This is the initial release of the AI Docs Vector DB Hybrid Scraper." >> CHANGELOG.md
          fi
          
          # Set output for use in release
          {
            echo 'changelog<<EOF'
            cat CHANGELOG.md
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
          retention-days: 30

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, security-scan, generate-changelog]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create or update tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          draft: ${{ github.event.inputs.draft == 'true' || false }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            release-artifacts/*
            security-report/security-report.md
            changelog/CHANGELOG.md
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment: pypi
    
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Publish to PyPI
        run: |
          uv tool install twine
          uv tool run twine upload dist/* --username __token__ --password ${{ secrets.PYPI_API_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create post-release issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-release.outputs.version }}';
            const issueBody = `## Post-Release Tasks for ${version}
            
            This issue tracks post-release activities for version ${version}.
            
            ### Tasks
            - [ ] Update documentation with new features
            - [ ] Announce release on social media/blog
            - [ ] Update demo/examples if needed
            - [ ] Monitor for issues and user feedback
            - [ ] Plan next release cycle
            
            ### Release Information
            - **Version**: ${version}
            - **Release Date**: ${new Date().toISOString().split('T')[0]}
            - **Release Notes**: https://github.com/${{ github.repository }}/releases/tag/${version}
            
            ### Monitoring
            - [ ] Check PyPI downloads
            - [ ] Monitor GitHub issues
            - [ ] Check CI/CD status
            
            Auto-created by release pipeline.`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Post-release tasks for ${version}`,
              body: issueBody,
              labels: ['release', 'maintenance']
            });

      - name: Notify team
        run: |
          echo "🎉 Release ${{ needs.validate-release.outputs.version }} has been published successfully!"
          echo "Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"

  release-summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, publish-pypi, post-release]
    if: always()
    
    steps:
      - name: Generate release summary
        run: |
          echo "# 🚀 Release Pipeline Summary" > RELEASE_SUMMARY.md
          echo "" >> RELEASE_SUMMARY.md
          echo "## Release Information" >> RELEASE_SUMMARY.md
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> RELEASE_SUMMARY.md
          echo "- **Prerelease**: ${{ needs.validate-release.outputs.is_prerelease }}" >> RELEASE_SUMMARY.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> RELEASE_SUMMARY.md
          echo "" >> RELEASE_SUMMARY.md
          echo "## Pipeline Results" >> RELEASE_SUMMARY.md
          echo "| Stage | Status |" >> RELEASE_SUMMARY.md
          echo "|-------|--------|" >> RELEASE_SUMMARY.md
          echo "| Validation | ${{ needs.validate-release.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> RELEASE_SUMMARY.md
          echo "| Artifacts | ${{ needs.build-artifacts.result == 'success' && '✅ Built' || '❌ Failed' }} |" >> RELEASE_SUMMARY.md
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> RELEASE_SUMMARY.md
          echo "| GitHub Release | ${{ needs.create-release.result == 'success' && '✅ Created' || '❌ Failed' }} |" >> RELEASE_SUMMARY.md
          echo "| PyPI Publish | ${{ needs.publish-pypi.result == 'success' && '✅ Published' || needs.publish-pypi.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> RELEASE_SUMMARY.md
          echo "| Post-Release | ${{ needs.post-release.result == 'success' && '✅ Completed' || '❌ Failed' }} |" >> RELEASE_SUMMARY.md
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "" >> RELEASE_SUMMARY.md
            echo "✅ **Release pipeline completed successfully!**" >> RELEASE_SUMMARY.md
            echo "" >> RELEASE_SUMMARY.md
            echo "🔗 **Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> RELEASE_SUMMARY.md
          else
            echo "" >> RELEASE_SUMMARY.md
            echo "❌ **Release pipeline failed**" >> RELEASE_SUMMARY.md
          fi

      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary
          path: RELEASE_SUMMARY.md
          retention-days: 90
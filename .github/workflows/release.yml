name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Existing tag to release (e.g. v1.2.3)'
        required: true

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHONUNBUFFERED: "1"
  UV_SYSTEM_PYTHON: "1"

jobs:
  prepare:
    name: Resolve tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      version: ${{ steps.tag.outputs.version }}
      is-prerelease: ${{ steps.tag.outputs.is_prerelease }}
      has-docker: ${{ steps.detect.outputs.has_docker }}
    steps:
      - name: Resolve version
        id: tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${GITHUB_REF_NAME}"
          fi

          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[A-Za-z0-9.-]+)?$ ]]; then
            echo "Tag must look like v1.2.3"
            exit 1
          fi

          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "is_prerelease=false" >> "$GITHUB_OUTPUT"
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ steps.tag.outputs.version }}

      - name: Detect Docker targets
        id: detect
        run: |
          if [ -f docker/Dockerfile.worker ]; then
            echo "has_docker=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_docker=false" >> "$GITHUB_OUTPUT"
          fi

  quality:
    name: Validate release
    runs-on: ubuntu-latest
    needs: prepare
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ needs.prepare.outputs.version }}

      - name: Prepare workspace
        uses: ./.github/actions/checkout-and-setup
        with:
          ref: ${{ needs.prepare.outputs.version }}
          python-version: "3.12"
          cache-suffix: "-release-quality"

      - name: Ruff format (check)
        run: uv run ruff format --check .

      - name: Ruff lint
        run: uv run ruff check .

      - name: Pylint
        run: uv run pylint --fail-under=9.5 src scripts

      - name: Pyright
        run: uv run pyright

      - name: Run release test profile
        run: uv run python scripts/dev.py test --profile ci

  build-artifacts:
    name: Build distributions
    runs-on: ubuntu-latest
    needs:
      - prepare
      - quality
    permissions:
      contents: read
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.VERSION }}

      - name: Prepare workspace
        uses: ./.github/actions/checkout-and-setup
        with:
          ref: ${{ env.VERSION }}
          python-version: "3.12"
          cache-suffix: "-release-build"

      - name: Align pyproject version
        run: |
          RAW_VERSION="${VERSION#v}"
          sed -i "s/^version = \".*\"$/version = \"${RAW_VERSION}\"/" pyproject.toml
          grep '^version =' pyproject.toml

      - name: Build distributions
        run: uv build

      - name: Verify metadata
        run: |
          uv tool install twine
          uv tool run twine check dist/*

      - name: Upload release artifacts
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-dist
          path: dist/
          retention-days: 30

  publish-docker:
    name: Publish Docker image
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-artifacts
    if: needs.prepare.outputs.has-docker == 'true'
    permissions:
      contents: read
      packages: write
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ env.VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          file: docker/Dockerfile.worker
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate SBOM
        uses: anchore/sbom-action@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6
        with:
          image: ghcr.io/${{ github.repository }}:${{ needs.prepare.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: docker-sbom
          path: sbom.spdx.json
          retention-days: 30

  security-report:
    name: Security report
    runs-on: ubuntu-latest
    needs:
      - build-artifacts
    permissions:
      contents: read
    steps:
      - name: Prepare workspace
        uses: ./.github/actions/checkout-and-setup
        with:
          python-version: "3.12"
          cache-suffix: "-release-security"

      - name: Download release artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: release-dist
          path: dist

      - name: Install security tooling
        run: uv tool install pip-audit bandit

      - name: Run dependency and code scans
        run: |
          set -euo pipefail

          pip_audit_status=0
          bandit_status=0

          {
            echo "# Security scan"
            echo
            echo "## Dependency vulnerabilities"
          } > security-report.md

          if uv tool run pip-audit --format=markdown >> security-report.md; then
            echo >> security-report.md
            echo "_No dependency vulnerabilities detected._" >> security-report.md
          else
            pip_audit_status=$?
            echo >> security-report.md
            echo "_pip-audit exited with status ${pip_audit_status}. Review the output above._" >> security-report.md
          fi

          {
            echo
            echo "## Code security issues"
          } >> security-report.md

          if uv tool run bandit -r src -f txt >> security-report.md; then
            echo >> security-report.md
            echo "_No code security issues detected._" >> security-report.md
          else
            bandit_status=$?
            echo >> security-report.md
            echo "_Bandit exited with status ${bandit_status}. Review the output above._" >> security-report.md
          fi

          if [ "$pip_audit_status" -ne 0 ] || [ "$bandit_status" -ne 0 ]; then
            echo "Security tooling reported failures. See security-report.md for details." >&2
            exit 1
          fi

      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  github-release:
    name: Create GitHub release
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-artifacts
      - security-report
      - publish-docker
    permissions:
      contents: write
    if: >-
      needs.prepare.result == 'success' &&
      needs.build-artifacts.result == 'success' &&
      needs.security-report.result == 'success' &&
      (needs.publish-docker.result == 'success' || needs.publish-docker.result == 'skipped')
    steps:
      - name: Download distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: release-dist
          path: release/dist

      - name: Download security report
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: security-report
          path: release/security
          if-no-files-found: ignore

      - name: Download SBOM (if available)
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: docker-sbom
          path: release/sbom
          if-no-files-found: ignore

      - name: Collect release assets
        run: |
          set -euo pipefail
          mkdir -p assets
          shopt -s nullglob

          dist_files=(release/dist/*)
          if [ "${#dist_files[@]}" -eq 0 ]; then
            echo "::error::No distribution artifacts were downloaded." >&2
            exit 1
          fi
          cp "${dist_files[@]}" assets/

          if [ -f release/security/security-report.md ]; then
            cp release/security/security-report.md assets/security-report.md
          else
            echo "::warning::security-report.md not found; security report will be omitted." >&2
          fi

          if [ -f release/sbom/sbom.spdx.json ]; then
            cp release/sbom/sbom.spdx.json assets/sbom.spdx.json
          else
            echo "::notice::SBOM artifact not present; skipping attachment." >&2
          fi

      - name: Create release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          tag_name: ${{ needs.prepare.outputs.version }}
          files: assets/*
          generate_release_notes: true
          prerelease: ${{ needs.prepare.outputs.is-prerelease == 'true' }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - prepare
      - build-artifacts
      - github-release
    if: needs.prepare.outputs.is-prerelease == 'false' && secrets.PYPI_API_TOKEN != ''
    environment: pypi
    permissions:
      contents: read
    steps:
      - name: Download distributions
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: release-dist
          path: dist

      - name: Publish package
        uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # release/v1
        with:
          packages-dir: dist
          password: ${{ secrets.PYPI_API_TOKEN }}

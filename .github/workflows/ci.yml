name: Continuous Integration (Optimized)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  UV_SYSTEM_PYTHON: 1
  UV_CACHE_COMPRESSION: 1
  UV_COMPILE_BYTECODE: 1
  UV_LINK_MODE: copy
  PYTHONOPTIMIZE: 1
  PYTEST_XDIST_AUTO_NUM_WORKERS: 4

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python-code: ${{ steps.changes.outputs.python-code }}
      tests: ${{ steps.changes.outputs.tests }}
      config: ${{ steps.changes.outputs.config }}
      docs: ${{ steps.changes.outputs.docs }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
      workflows: ${{ steps.changes.outputs.workflows }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3.0.2
        id: changes
        with:
          filters: |
            python-code:
              - 'src/**/*.py'
              - 'scripts/**/*.py'
            tests:
              - 'tests/**/*.py'
              - 'tests/**/*.json'
              - 'tests/**/*.yml'
            config:
              - 'pyproject.toml'
              - 'uv.lock'
              - 'config/**'
            docs:
              - 'docs/**'
              - '*.md'
            dependencies:
              - 'requirements.txt'
              - 'requirements-dev.txt'
              - 'pyproject.toml'
              - 'uv.lock'
            workflows:
              - '.github/workflows/**'
              - '.github/actions/**'

  fast-checks:
    name: Fast Checks
    runs-on: ubuntu-latest
    needs: detect-changes
    if: github.event_name == 'pull_request' || needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.tests == 'true'
    timeout-minutes: 8
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.12'
          cache-suffix: '-fast'

      - name: Cache ruff
        uses: actions/cache@v4.2.4
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Run ruff checks
        run: |
          echo "🔍 Running linting checks..."
          uv run ruff check . --output-format=github
          uv run ruff format --check .

      - name: Python syntax check
        run: |
          echo "🐍 Running syntax validation..."
          find src -name "*.py" -exec python -m py_compile {} \;

      - name: Run fast unit tests
        run: |
          echo "⚡ Running fast unit tests..."
          uv pip install pytest-timeout>=2.3.1 pytest-xdist>=3.0.0
          mkdir -p tests/fixtures/{cache,data,logs} logs cache data
          
          uv run pytest tests/unit \
            -m "not slow and not browser and not integration" \
            --tb=line \
            --maxfail=5 \
            -x \
            --disable-warnings \
            --numprocesses=auto \
            --timeout=30

      - name: Validate dependencies
        if: needs.detect-changes.outputs.dependencies == 'true'
        run: |
          echo "📦 Validating dependency configuration..."
          uv lock --check

  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ${{ matrix.os }}
    needs: [detect-changes, fast-checks]
    if: always() && (needs.fast-checks.result == 'success' || needs.fast-checks.result == 'skipped')
    
    strategy:
      fail-fast: false
      matrix:
        # Smart matrix based on event type and changes
        include:
          # PR testing - minimal but effective
          - os: ubuntu-latest
            python-version: '3.12'
            coverage: true
            test-type: 'pr'
            if: github.event_name == 'pull_request'
          
          # Main branch - comprehensive testing
          - os: ubuntu-latest
            python-version: '3.12'
            coverage: true
            test-type: 'full'
            if: github.ref == 'refs/heads/main'
          - os: ubuntu-latest
            python-version: '3.11'
            coverage: false
            test-type: 'full'
            if: github.ref == 'refs/heads/main'
          - os: windows-latest
            python-version: '3.12'
            coverage: false
            test-type: 'core'
            if: github.ref == 'refs/heads/main'
          - os: macos-latest
            python-version: '3.12'
            coverage: false
            test-type: 'core'
            if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: '-${{ matrix.test-type }}'

      - name: Setup test environment
        shell: bash
        run: |
          mkdir -p tests/fixtures/{cache,data,logs,vectors,embeddings} logs cache data
          if [ "${{ runner.os }}" != "Windows" ]; then
            chmod -R 755 tests logs cache data
          fi
          
          echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV
          echo "TESTING=true" >> $GITHUB_ENV
          echo "LOG_LEVEL=INFO" >> $GITHUB_ENV
          echo "SKIP_BROWSER_TESTS=1" >> $GITHUB_ENV
          
          if [ "${{ matrix.test-type }}" == "pr" ] || [ "${{ matrix.test-type }}" == "core" ]; then
            echo "SKIP_INTEGRATION_TESTS=1" >> $GITHUB_ENV
          fi

      - name: Install test dependencies
        shell: bash
        run: |
          uv pip install pytest-timeout>=2.3.1 pytest-xdist>=3.0.0

      - name: Run test suite
        shell: bash
        run: |
          # Configure test markers based on test type and platform
          case "${{ matrix.test-type }}" in
            "pr")
              TEST_MARKERS="not slow and not integration and not gpu"
              TEST_DIRS="tests/unit"
              TIMEOUT=180
              ;;
            "core")
              TEST_MARKERS="not slow and not integration and not gpu"
              TEST_DIRS="tests/unit tests/integration"
              TIMEOUT=300
              ;;
            "full")
              TEST_MARKERS="not gpu"
              TEST_DIRS="tests/unit tests/integration"
              TIMEOUT=600
              ;;
          esac
          
          COVERAGE_ARGS="${{ matrix.coverage && '--cov=src --cov-report=xml --cov-report=html --cov-branch --cov-fail-under=60' || '' }}"
          
          echo "🧪 Running ${{ matrix.test-type }} tests on ${{ matrix.os }}..."
          uv run pytest $TEST_DIRS \
            -m "$TEST_MARKERS" \
            --tb=short \
            --maxfail=10 \
            --timeout=$TIMEOUT \
            --disable-warnings \
            --durations=10 \
            -v \
            $COVERAGE_ARGS

      - name: Upload coverage reports
        if: matrix.coverage
        uses: codecov/codecov-action@v5.5.1
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security & Dependency Check
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dependencies == 'true' || needs.detect-changes.outputs.python-code == 'true' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          cache-suffix: '-security'

      - name: Run security scans
        run: |
          echo "🔒 Running security scans..."
          
          # Dependency vulnerability scan
          uv tool install pip-audit
          uv tool run pip-audit --format=json --output=pip-audit-results.json --desc || true
          
          # Code security scan
          uv tool install bandit
          uv tool run bandit -r src/ -f json -o bandit-results.json || true
          
          # Safety check
          uv tool install safety
          uv tool run safety check --json --output safety-results.json || true

      - name: Process security results
        run: |
          echo "📊 Processing security scan results..."
          python - << 'EOF'
          import json
          import os
          
          results = {"vulnerabilities": 0, "issues": 0, "summary": []}
          
          # Process pip-audit results
          if os.path.exists("pip-audit-results.json") and os.path.getsize("pip-audit-results.json") > 0:
              with open("pip-audit-results.json") as f:
                  try:
                      audit_data = json.load(f)
                      if audit_data:
                          results["vulnerabilities"] += len(audit_data)
                          results["summary"].append(f"Found {len(audit_data)} dependency vulnerabilities")
                  except json.JSONDecodeError:
                      pass
          
          # Process bandit results
          if os.path.exists("bandit-results.json"):
              with open("bandit-results.json") as f:
                  try:
                      bandit_data = json.load(f)
                      issues = len(bandit_data.get("results", []))
                      results["issues"] += issues
                      if issues > 0:
                          results["summary"].append(f"Found {issues} code security issues")
                  except json.JSONDecodeError:
                      pass
          
          # Save summary
          with open("security-summary.json", "w") as f:
              json.dump(results, f)
          
          print(f"Security scan complete: {results['vulnerabilities']} vulnerabilities, {results['issues']} code issues")
          EOF

      - name: Upload security results
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-scan-results
          path: |
            *-results.json
            security-summary.json
          retention-days: 30

  build-test:
    name: Build & Package Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.config == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Build package
        run: |
          echo "📦 Building package..."
          uv build

      - name: Test package
        run: |
          echo "🧪 Testing package..."
          uv tool install twine
          uv tool run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  collect-results:
    name: Collect Results
    runs-on: ubuntu-latest
    needs: [fast-checks, comprehensive-tests, security-scan, build-test]
    if: always()
    
    steps:
      - name: Evaluate results
        id: evaluate
        run: |
          echo "📋 Evaluating CI results..."
          
          # Critical jobs that must pass
          CRITICAL_RESULTS=(
            "${{ needs.fast-checks.result }}"
            "${{ needs.comprehensive-tests.result }}"
            "${{ needs.build-test.result }}"
          )
          
          # Non-critical jobs
          SECURITY_RESULT="${{ needs.security-scan.result }}"
          
          FAILED_CRITICAL=0
          for result in "${CRITICAL_RESULTS[@]}"; do
            if [[ "$result" == "failure" ]]; then
              FAILED_CRITICAL=$((FAILED_CRITICAL + 1))
            fi
          done
          
          if [[ $FAILED_CRITICAL -gt 0 ]]; then
            echo "❌ CI failed - $FAILED_CRITICAL critical jobs failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ CI passed - all critical jobs successful"
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Post results comment
        uses: ./.github/actions/pr-comment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          comment-id: "ci-optimized-results"
          title: "🚀 Optimized CI Results"
          body: |
            ### Critical Checks
            - ${{ needs.fast-checks.result == 'success' && '✅' || (needs.fast-checks.result == 'failure' && '❌' || '⏭️') }} **Fast Checks**: ${{ needs.fast-checks.result }}
            - ${{ needs.comprehensive-tests.result == 'success' && '✅' || (needs.comprehensive-tests.result == 'failure' && '❌' || '⏭️') }} **Comprehensive Tests**: ${{ needs.comprehensive-tests.result }}
            - ${{ needs.build-test.result == 'success' && '✅' || (needs.build-test.result == 'failure' && '❌' || '⏭️') }} **Build Test**: ${{ needs.build-test.result }}
            
            ### Additional Checks
            - ${{ needs.security-scan.result == 'success' && '✅' || (needs.security-scan.result == 'failure' && '⚠️' || '⏭️') }} **Security Scan**: ${{ needs.security-scan.result }}
            
            **Status**: ${{ steps.evaluate.outputs.status == 'success' && '🎉 Ready to merge!' || '🚫 Issues found - please fix before merging' }}
            
            *Optimized CI completed in ~${{ github.event_name == 'pull_request' && '8' || '20' }} minutes*
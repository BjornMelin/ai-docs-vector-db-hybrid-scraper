name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  UV_SYSTEM_PYTHON: 1
  # Optimization: Enable UV cache compression
  UV_CACHE_COMPRESSION: 1

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python-code: ${{ steps.changes.outputs.python-code }}
      tests: ${{ steps.changes.outputs.tests }}
      config: ${{ steps.changes.outputs.config }}
      docs: ${{ steps.changes.outputs.docs }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python-code:
              - 'src/**/*.py'
              - 'scripts/**/*.py'
            tests:
              - 'tests/**/*.py'
              - 'tests/**/*.json'
              - 'tests/**/*.yml'
            config:
              - 'pyproject.toml'
              - 'uv.lock'
              - '.github/workflows/**'
              - 'config/**'
            docs:
              - 'docs/**'
              - '*.md'
            dependencies:
              - 'requirements.txt'
              - 'requirements-dev.txt'
              - 'pyproject.toml'
              - 'uv.lock'

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.tests == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: python-lint-${{ runner.os }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
          restore-keys: |
            python-lint-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Cache ruff
        uses: actions/cache@v4
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Run ruff check
        run: |
          uv run ruff check . --output-format=github

      - name: Run ruff format check
        run: |
          uv run ruff format --check .

      - name: Check import sorting
        run: |
          uv run ruff check --select I .

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.tests == 'true' || needs.detect-changes.outputs.config == 'true'
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12', '3.13']
        include:
          - os: ubuntu-latest
            python-version: '3.13'
            coverage: true
        exclude:
          # Reduce matrix size for faster CI - run only on Linux for PRs
          - os: windows-latest
            python-version: '3.11'
          - os: macos-latest
            python-version: '3.11'
          - os: windows-latest
            python-version: '3.12'
          - os: macos-latest
            python-version: '3.12'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            # Windows: Install with fallbacks for problematic native dependencies
            uv sync --dev --frozen || uv pip install --no-deps -e . && uv pip install -r pyproject.toml
          else
            uv sync --dev --frozen
          fi
        env:
          # Windows-specific environment variables for native dependencies
          PYTHONUTF8: 1
        shell: bash

      - name: Install browser dependencies
        shell: bash
        run: |
          # Use our tested browser setup script for cross-platform installation
          uv run python scripts/test_browser_setup.py || {
            echo "Browser setup script failed, attempting manual installation..."
            
            # Fallback manual installation based on OS
            if [ "${{ runner.os }}" == "Linux" ]; then
              # Linux: Try with system deps first, fall back to browser-only
              uv run python -m playwright install --with-deps chromium || \
              uv run python -m playwright install chromium
            elif [ "${{ runner.os }}" == "macOS" ]; then
              # macOS: Install browsers only (system deps not needed)
              uv run python -m playwright install chromium
            elif [ "${{ runner.os }}" == "Windows" ]; then
              # Windows: Install browsers only (system deps not needed)
              uv run python -m playwright install chromium
            fi
          }

      - name: Setup test environment
        shell: bash
        run: |
          # Create test directories (cross-platform)
          mkdir -p tests/fixtures/cache tests/fixtures/data tests/fixtures/logs
          mkdir -p logs cache data
          
          # Set environment variables for headless testing
          echo "PLAYWRIGHT_BROWSERS_PATH=0" >> $GITHUB_ENV
          echo "CRAWL4AI_HEADLESS=true" >> $GITHUB_ENV

      - name: Run unit tests
        run: |
          uv run pytest tests/unit \
            --tb=short \
            --maxfail=10 \
            -x \
            --disable-warnings \
            ${{ matrix.coverage && '--cov=src --cov-report=xml --cov-report=html --cov-branch' || '' }}

      - name: Run integration tests
        run: |
          uv run pytest tests/integration \
            --tb=short \
            --maxfail=5 \
            -x \
            --disable-warnings

      - name: Upload coverage reports
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload coverage artifact
        if: matrix.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Check coverage threshold
        if: matrix.coverage
        run: |
          uv run coverage report --fail-under=80

  type-check:
    name: Type Checking
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run mypy (if configured)
        run: |
          if [ -f "pyproject.toml" ] && grep -q "mypy" pyproject.toml; then
            uv run mypy src/
          else
            echo "mypy not configured, skipping type checking"
          fi
        continue-on-error: true

  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dependencies == 'true' || needs.detect-changes.outputs.config == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run pip-audit
        run: |
          uv tool install pip-audit
          uv run pip-audit --format=json --output=audit-results.json || true
          if [ -f "audit-results.json" ]; then
            uv run pip-audit --format=table
          fi
        continue-on-error: true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-scan
          path: audit-results.json
          retention-days: 30

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.config == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Build package
        run: |
          uv build

      - name: Check package
        run: |
          uv tool install twine
          uv run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.python-code == 'true' || needs.detect-changes.outputs.config == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build worker Docker image
        if: hashFiles('docker/Dockerfile.worker') != ''
        run: |
          docker build -f docker/Dockerfile.worker -t test-worker .

      - name: Test Docker services
        if: hashFiles('docker-compose.yml') != ''
        run: |
          # Test docker compose configuration
          docker compose config

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test, lint-and-format]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Run performance benchmarks
        run: |
          # Run performance tests if they exist
          if [ -d "tests/performance" ]; then
            uv run pytest tests/performance -m "not slow" --tb=short
          elif [ -f "scripts/benchmark_query_api.py" ]; then
            uv run python scripts/benchmark_query_api.py --quick
          else
            echo "No performance tests found, skipping"
          fi
        continue-on-error: true

  collect-results:
    name: Collect Results
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, type-check, dependency-check, build-test, docker-test]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          echo "Build Test: ${{ needs.build-test.result }}"
          echo "Docker Test: ${{ needs.docker-test.result }}"
          
          # Check if any required job failed
          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed - required checks failed"
            exit 1
          else
            echo "✅ CI pipeline passed - all required checks successful"
          fi

      - name: Post status comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'lint-and-format': '${{ needs.lint-and-format.result }}',
              'test': '${{ needs.test.result }}',
              'type-check': '${{ needs.type-check.result }}',
              'dependency-check': '${{ needs.dependency-check.result }}',
              'build-test': '${{ needs.build-test.result }}',
              'docker-test': '${{ needs.docker-test.result }}'
            };
            
            let message = '## CI Pipeline Results\n\n';
            for (const [job, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : result === 'skipped' ? '⏭️' : '🔄';
              message += `${emoji} **${job}**: ${result}\n`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });
name: Fast Check (Pre-commit Style)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  UV_CACHE_COMPRESSION: 1

# Only run the most recent version on PR updates
concurrency:
  group: fast-check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fast-lint:
    name: ⚡ Fast Lint Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # Minimal checkout for speed

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: fast-lint-${{ runner.os }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
          restore-keys: |
            fast-lint-${{ runner.os }}-

      - name: Cache ruff
        uses: actions/cache@v4
        with:
          path: ~/.cache/ruff
          key: fast-ruff-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            fast-ruff-${{ runner.os }}-

      - name: Install core dependencies only
        run: |
          # Install minimal dependencies for linting
          uv sync --no-dev --frozen || uv sync --dev --frozen

      - name: Run ruff check (fail fast)
        run: |
          uv run ruff check . --output-format=github --exit-non-zero-on-fix

      - name: Run ruff format check
        run: |
          uv run ruff format --check . --diff

  fast-test:
    name: ⚡ Fast Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fast-lint
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: true
          cache-dependency-glob: "**/uv.lock"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .venv
          key: fast-test-${{ runner.os }}-${{ hashFiles('**/uv.lock', 'pyproject.toml') }}
          restore-keys: |
            fast-test-${{ runner.os }}-

      - name: Install dependencies
        run: |
          uv sync --dev --frozen

      - name: Create test directories
        run: |
          mkdir -p tests/fixtures/cache tests/fixtures/data tests/fixtures/logs
          mkdir -p logs cache data

      - name: Run fastest unit tests only
        run: |
          # Install pytest-xdist for parallel testing
          uv add --dev pytest-xdist
          
          # Run only fast unit tests (no browser, no integration)
          uv run pytest tests/unit \
            -m "not slow and not browser" \
            --tb=line \
            --maxfail=3 \
            -x \
            --disable-warnings \
            --numprocesses=auto \
            --timeout=30

  syntax-check:
    name: ⚡ Python Syntax Check
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Check Python syntax
        run: |
          # Fast syntax check without installing dependencies
          python -m py_compile src/**/*.py tests/**/*.py scripts/**/*.py || true
          
          # Check for basic import issues
          find src -name "*.py" -exec python -m py_compile {} \;

  requirements-check:
    name: ⚡ Requirements Validation
    runs-on: ubuntu-latest
    timeout-minutes: 3
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"
          enable-cache: false  # Skip cache for faster startup

      - name: Validate uv.lock and pyproject.toml
        run: |
          # Check if uv.lock is in sync with pyproject.toml
          uv lock --check
          
          # Validate pyproject.toml syntax
          uv tree --depth 1 || echo "Tree generation failed, continuing..."

  collect-fast-results:
    name: 📊 Fast Check Results
    runs-on: ubuntu-latest
    needs: [fast-lint, fast-test, syntax-check, requirements-check]
    if: always()
    
    steps:
      - name: Check results and provide feedback
        run: |
          echo "## ⚡ Fast Check Results" > fast-results.md
          echo "" >> fast-results.md
          echo "| Check | Status | Duration |" >> fast-results.md
          echo "|-------|--------|----------|" >> fast-results.md
          echo "| Lint | ${{ needs.fast-lint.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~2 min |" >> fast-results.md
          echo "| Unit Tests | ${{ needs.fast-test.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~5 min |" >> fast-results.md
          echo "| Syntax | ${{ needs.syntax-check.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~1 min |" >> fast-results.md
          echo "| Requirements | ${{ needs.requirements-check.result == 'success' && '✅ Passed' || '❌ Failed' }} | ~1 min |" >> fast-results.md
          echo "" >> fast-results.md
          
          if [[ "${{ needs.fast-lint.result }}" == "failure" ]] || \
             [[ "${{ needs.fast-test.result }}" == "failure" ]]; then
            echo "❌ **Fast checks failed!** Please fix the issues before proceeding." >> fast-results.md
            echo "" >> fast-results.md
            echo "### Next Steps:" >> fast-results.md
            echo "1. Fix linting issues: \`uv run ruff check . --fix && uv run ruff format .\`" >> fast-results.md
            echo "2. Fix failing tests locally: \`uv run pytest tests/unit -v\`" >> fast-results.md
            echo "3. Commit and push fixes" >> fast-results.md
            echo "" >> fast-results.md
            echo "💡 **Tip**: Use \`pre-commit\` hooks to catch these issues early!" >> fast-results.md
            exit 1
          else
            echo "✅ **All fast checks passed!** The full CI pipeline will run comprehensive tests." >> fast-results.md
            echo "" >> fast-results.md
            echo "### What's Next:" >> fast-results.md
            echo "- Full test suite (including browser tests)" >> fast-results.md
            echo "- Multi-platform testing (Windows, macOS)" >> fast-results.md
            echo "- Integration tests" >> fast-results.md
            echo "- Security and dependency checks" >> fast-results.md
          fi

      - name: Upload fast check results
        uses: actions/upload-artifact@v4
        with:
          name: fast-check-results
          path: fast-results.md
          retention-days: 7

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const results = fs.readFileSync('fast-results.md', 'utf8');
              
              // Update or create comment
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const existingComment = comments.find(comment => 
                comment.body.includes('⚡ Fast Check Results')
              );
              
              if (existingComment) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: results
                });
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: results
                });
              }
            } catch (error) {
              console.log('Error handling fast check comment:', error);
            }
[pytest]
minversion = 8.0
addopts =
    --strict-config
    --strict-markers
    --maxfail=1
    --durations=20
    --showlocals
    --randomly-seed=1337
    --randomly-dont-reset-seed
    --import-mode=importlib
python_files = test_*.py
python_functions = test_*
python_classes = Test* *Test *Tests
testpaths = tests
filterwarnings =
    error
    ignore:pkg_resources is deprecated as an API.:DeprecationWarning
    ignore:Support for class-based `config` is deprecated:DeprecationWarning
    ignore:unclosed event loop:ResourceWarning
    ignore:unclosed <socket\.socket:ResourceWarning
markers =
    accessibility: accessibility and WCAG validation scenarios
    ai: AI and embedding focused tests
    api_latency: API latency monitoring coverage
    async_framework: async framework compatibility checks
    asyncio: coroutine-based unit tests
    authentication: authentication guard behaviour
    authorization: authorization policy validation
    baseline: baseline comparisons for regression tracking
    benchmark: performance benchmark coverage
    browser: browser automation flows
    chaos: chaos and failure injection tests
    cli: command line interface behaviour
    comparison: comparison harness coverage for legacy migrations
    compatibility: cross-version compatibility scenarios
    component: component-level integration coverage
    config: configuration model tests
    cpu: CPU performance validation
    data_protection: data protection compliance checks
    data_sanitization: sanitization and scrubbing behaviours
    database: database integration paths
    dependency_injection: dependency injection container tests
    e2e: end-to-end verification suites
    embedding: embedding-specific coverage
    endurance: long-running soak tests
    fast: sub-second smoke scenarios
    framework_resolution: framework resolution logic tests
    hypothesis: property-based testing suites
    input_validation: input validation scenarios
    integration: multi-component integration tests
    interaction: conversational interaction behaviours
    interactive: interactive CLI or UI coverage
    latency_validation: latency threshold enforcement
    load: load testing workloads
    mcp: Model Context Protocol specific tests
    memory: memory footprint validation
    models: model schema coverage
    modern: modern platform focused tests
    monitoring: observability pipeline validation
    network: network-dependent scenarios
    observability: observability configuration coverage
    performance: performance-sensitive flows
    pii_detection: personally identifiable information detection
    property: property-based heuristics
    property_based: property-based regression checks
    query_processing: query processing pipelines
    questionary: questionary CLI helper coverage
    rag: retrieval augmented generation coverage
    rate_limit: rate limiting enforcement tests
    rbac: role-based access control flows
    responsive: responsiveness validation
    respx: respx HTTP mocking dependent tests
    respx_compatibility: respx compatibility surface checks
    rich: rich terminal rendering tests
    security: security-focused scenarios
    service: service layer integration tests
    slow: long-running scenarios
    spike: spike load validation
    stress: stress testing workloads
    throughput: throughput validation scenarios
    throughput_validation: throughput threshold enforcement
    unit: isolated unit test coverage
    vector_db: vector database operations
    visual: visual regression scenarios
    volume: volume-based load testing
    vulnerability: vulnerability scanning coverage
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

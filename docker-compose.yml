version: "3.8"

services:
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant-vector-db
    restart: unless-stopped
    ports:
      - "6333:6333" # HTTP API
      - "6334:6334" # gRPC API (high performance)
    volumes:
      # Persistent storage mapping to WSL/local directory
      - ~/.qdrant_data:/qdrant/storage:z
    environment:
      # Advanced Performance Optimizations
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__LOG_LEVEL=INFO

      # Storage optimizations for hybrid search + quantization
      - QDRANT__STORAGE__ON_DISK_PAYLOAD=true
      - QDRANT__STORAGE__QUANTIZATION__ALWAYS_RAM=true
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=8
      - QDRANT__STORAGE__OPTIMIZERS__DEFAULT_SEGMENT_NUMBER=16

      # Memory and performance tuning
      - QDRANT__STORAGE__WRITE_CONSISTENCY_FACTOR=1
      - QDRANT__STORAGE__REPLICATION_FACTOR=1

      # Hybrid search optimizations
      - QDRANT__STORAGE__SPARSE_VECTORS__ON_DISK=true
      - QDRANT__STORAGE__QUANTIZATION__SCALAR__TYPE=int8
      - QDRANT__STORAGE__HNSW__M=16
      - QDRANT__STORAGE__HNSW__EF_CONSTRUCT=128

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"
    networks:
      - advanced-vector-network

  # DragonflyDB: High-performance Redis-compatible cache
  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: dragonfly-cache
    restart: unless-stopped
    ports:
      - "6379:6379" # Redis-compatible port
    volumes:
      # Persistent storage for DragonflyDB
      - ~/.dragonfly_data:/data:z
    environment:
      - DRAGONFLY_THREADS=8
      - DRAGONFLY_MEMORY_LIMIT=4gb
      - DRAGONFLY_SNAPSHOT_INTERVAL=3600
      - DRAGONFLY_SAVE_SCHEDULE="0 */1 * * *"
    command: >
      --logtostderr
      --cache_mode
      --maxmemory_policy=allkeys-lru
      --compression=zstd
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6379", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: "2.0"
        reservations:
          memory: 2G
          cpus: "1.0"
    networks:
      - advanced-vector-network

  # Main FastAPI application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-docs-app
    restart: unless-stopped
    ports:
      - "8000:8000" # FastAPI application port
    environment:
      - AI_DOCS_VECTOR_DB__QDRANT_URL=http://qdrant:6333
      - AI_DOCS_CACHE__REDIS_URL=redis://dragonfly:6379
      - AI_DOCS_CACHE__REDIS_DATABASE=0
      - AI_DOCS_LOG_LEVEL=INFO
      - PYTHONPATH=/app/src
      - AI_DOCS_MODE=simple  # Can be 'simple' or 'enterprise'
    volumes:
      - ./config:/app/config:ro
      - ~/.qdrant_data:/qdrant/storage:z
    depends_on:
      - dragonfly
      - qdrant
    networks:
      - advanced-vector-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/config/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
    profiles:
      - app
      - production

  # ARQ task queue worker for background jobs
  task-worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    container_name: task-worker
    restart: unless-stopped
    environment:
      - AI_DOCS_TASK_QUEUE__REDIS_URL=redis://dragonfly:6379
      - AI_DOCS_TASK_QUEUE__REDIS_DATABASE=1
      - AI_DOCS_TASK_QUEUE__WORKER_POOL_SIZE=4
      - AI_DOCS_LOG_LEVEL=INFO
      - PYTHONPATH=/app/src
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ~/.qdrant_data:/qdrant/storage:z
    depends_on:
      - dragonfly
      - qdrant
    networks:
      - advanced-vector-network
    command: arq src.services.task_queue.worker.WorkerSettings
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 1G
          cpus: "0.5"
    profiles:
      - worker
      - production

  # Optional: Add monitoring for production deployments
  qdrant-exporter:
    image: qdrant/qdrant-exporter:latest
    container_name: qdrant-exporter
    restart: unless-stopped
    ports:
      - "9090:9090"
    environment:
      - QDRANT_URL=http://qdrant:6333
    depends_on:
      - qdrant
    networks:
      - advanced-vector-network
    profiles:
      - monitoring
      - production

networks:
  advanced-vector-network:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1500

# Production profile for advanced deployment
x-production-settings: &production
  deploy:
    resources:
      limits:
        memory: 8G
        cpus: "4.0"
      reservations:
        memory: 4G
        cpus: "2.0"
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s

# Development override for resource-constrained environments
x-development-settings: &development
  deploy:
    resources:
      limits:
        memory: 2G
        cpus: "1.0"
      reservations:
        memory: 1G
        cpus: "0.5"

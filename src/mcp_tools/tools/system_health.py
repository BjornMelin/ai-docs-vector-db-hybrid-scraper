"""MCP tools for querying centralized system health state."""

from __future__ import annotations

import logging
from typing import TYPE_CHECKING, Any

from src.infrastructure.client_manager import ClientManager
from src.services.health.manager import HealthCheckManager, HealthStatus


try:  # pragma: no cover - optional dependency
    from fastmcp import Context
except ImportError:  # pragma: no cover - fallback for linting environments
    Context = Any  # type: ignore[assignment]

if TYPE_CHECKING:  # pragma: no cover - typing only
    from fastmcp import Context as MCPContext

    Context = MCPContext


logger = logging.getLogger(__name__)


def _resolve_health_manager(client_manager: ClientManager) -> HealthCheckManager:
    """Return the configured health manager instance."""

    try:
        return client_manager.get_health_manager()
    except RuntimeError as error:  # pragma: no cover - defensive
        logger.error("Health manager unavailable: %s", error)
        raise


def register_tools(mcp, client_manager: ClientManager):
    """Register system health monitoring tools."""

    @mcp.tool()
    async def get_system_health(
        ctx: Context | None = None,
    ) -> dict[str, Any]:
        """Return overall health information from the central manager.

        Args:
            ctx: Optional MCP context for streaming updates.

        Returns:
            Aggregated health summary generated by :class:`HealthCheckManager`.
        """

        try:
            manager = _resolve_health_manager(client_manager)
        except RuntimeError as error:
            message = f"Health manager unavailable: {error}"
            logger.exception(message)
            if ctx:
                await ctx.error(message)
            return {"status": HealthStatus.UNKNOWN.value, "error": message}
        summary = await manager.get_overall_health()

        if ctx:
            await ctx.info(f"System health: {summary['overall_status']}")

        return summary

    @mcp.tool()
    async def get_process_info(
        ctx: Context | None = None,
    ) -> dict[str, Any]:
        """Return the latest system resource check metadata.

        Args:
            ctx: Optional MCP context for streaming updates.

        Returns:
            Structured metadata for the ``system_resources`` health check.
        """

        try:
            manager = _resolve_health_manager(client_manager)
        except RuntimeError as error:
            message = f"Health manager unavailable: {error}"
            logger.exception(message)
            if ctx:
                await ctx.error(message)
            return {"status": HealthStatus.UNKNOWN.value, "error": message}
        result = await manager.check_single("system_resources")
        if result is None:
            message = (
                "System resource health check is not registered; "
                "enable monitoring to collect metrics."
            )
            if ctx:
                await ctx.info(message)
            return {"status": HealthStatus.UNKNOWN.value, "message": message}

        response = {
            "status": result.status.value,
            "message": result.message,
            "timestamp": result.timestamp,
            "duration_ms": result.duration_ms,
            "metrics": result.metadata,
        }

        if ctx:
            await ctx.info(
                "System resources %s: CPU %.1f%%, memory %.1f%%",
                result.status.value,
                result.metadata.get("cpu_percent", 0.0),
                result.metadata.get("memory_percent", 0.0),
            )

        return response

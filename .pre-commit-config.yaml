# Pre-commit hooks configuration
# Run `uv tool install pre-commit && pre-commit install` to set up

repos:
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
        exclude: '^(.*\.md|.*\.txt)$'
      - id: end-of-file-fixer
        exclude: '^(.*\.md|.*\.txt)$'
      - id: check-yaml
        args: ['--unsafe']
      - id: check-toml
      - id: check-json
      - id: check-added-large-files
        args: ['--maxkb=1000']
      - id: check-merge-conflict
      - id: debug-statements
      - id: check-docstring-first
      - id: check-case-conflict

  # Python code formatting and linting with Ruff
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.8.4
    hooks:
      # Linter
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        types_or: [python, pyi, jupyter]
      # Formatter
      - id: ruff-format
        types_or: [python, pyi, jupyter]

  # Security checks
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        args: ['-r', 'src/', '-f', 'json']
        exclude: '^tests/'

  # Secret detection
  - repo: https://github.com/gitleaks/gitleaks
    rev: v8.21.2
    hooks:
      - id: gitleaks

  # Dependency checks
  - repo: https://github.com/lucas-c/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: pyproject.toml

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        args: [--fix]
        exclude: '^(htmlcov|cache|logs)/'

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types_or: [yaml, json]
        exclude: '^(.*\.lock|uv\.lock)$'

  # Local hooks for project-specific checks
  - repo: local
    hooks:
      - id: pytest-check
        name: Run pytest
        entry: uv run pytest tests/unit --tb=short --maxfail=5 -x --disable-warnings
        language: system
        pass_filenames: false
        always_run: false
        files: '^(src/|tests/)'
        stages: [commit]

      - id: mypy-check
        name: Run mypy type checking
        entry: bash -c 'if command -v mypy &> /dev/null; then uv run mypy src/; else echo "mypy not installed, skipping"; fi'
        language: system
        pass_filenames: false
        files: '^src/.*\.py$'
        stages: [commit]

      - id: check-file-naming
        name: Check file naming conventions
        entry: bash -c 'find src tests -name "*.py" | grep -E "[A-Z]" && echo "❌ Python files should use snake_case" && exit 1 || echo "✅ File naming looks good"'
        language: system
        pass_filenames: false
        stages: [commit]

      - id: update-docs
        name: Update documentation
        entry: python scripts/docs_automation.py --skip-validation --build-only
        language: system
        files: '^(docs/|README\.md|mkdocs\.yml)'
        pass_filenames: false
        stages: [commit]

      - id: validate-config
        name: Validate configuration
        entry: python scripts/validate_config.py
        language: system
        files: '^(\.env.*|pyproject\.toml|src/config/)'
        pass_filenames: false
        stages: [commit]

# Configuration for pre-commit
default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: "3.0.0"

# Skip hooks for certain commits
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
# Fast pytest configuration for parallel execution
# Usage: pytest -c pytest-fast.ini

[pytest]
# Core collection settings for speed
testpaths = tests
python_files = test_*.py
python_functions = test_*
python_classes = Test* *Test *Tests

# Fast parallel execution settings
addopts = 
    -n auto
    --dist=worksteal
    --tb=short
    --strict-markers
    --disable-warnings
    --no-header
    --no-summary
    -q
    --maxfail=3
    --durations=5
    --benchmark-skip

# Fast timeout and collection
timeout = 60
collect_ignore = 
    tests/load/
    tests/stress_testing/
    tests/chaos/
    tests/accessibility/
    tests/visual_regression/

# Fast execution markers
markers =
    fast: marks tests as fast running (< 0.1s) - run in CI
    medium: marks tests as medium running (0.1s - 2s) - run in CI
    slow: marks tests as slow running (> 2s) - skip in fast CI
    unit: marks tests as unit tests - highest priority
    integration: marks tests as integration tests - medium priority
    e2e: marks tests as end-to-end tests - lowest priority
    no_network: marks tests that don't require network - fastest
    no_database: marks tests that don't require database - fast
    no_browser: marks tests that don't require browser - fast
    ci_fast: marks tests for fast CI pipeline (< 5min total)
    ci_full: marks tests for full CI pipeline
    local_only: marks tests that should only run locally

# Async configuration for speed
asyncio_mode = auto
asyncio_default_fixture_loop_scope = function

# Minimal logging for performance
log_cli = false
log_level = ERROR

# Fast warnings filter
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::ResourceWarning
    ignore::pytest.PytestUnraisableExceptionWarning

# Cache configuration for speed
cache_dir = .pytest_cache/fast